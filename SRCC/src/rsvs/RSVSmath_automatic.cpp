#include <cmath>
#include <vector>

#include "vectorarray.hpp"
using namespace std;

#include "RSVSmath_automatic.hpp"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void Volume2_f(double d0, double d1, double d2, const vector<double> &g0s, const vector<double> &g1s,
               const vector<double> &g2s, const vector<double> &g0e, const vector<double> &g1e,
               const vector<double> &g2e, double &t0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
    t2 = g0e[1] - g0s[1];
    t3 = d0 * t2;
    t4 = g0e[0] - g0s[0];
    t5 = d0 * t4;
    t6 = g1e[0] - g1s[0];
    t7 = g0s[0] - g1s[0] + t5 - d1 * t6;
    t8 = g0e[2] - g0s[2];
    t9 = d0 * t8;
    t10 = g2e[0] - g2s[0];
    t11 = g0s[0] - g2s[0] + t5 - d2 * t10;
    t12 = g1e[1] - g1s[1];
    t13 = g0s[1] - g1s[1] + t3 - d1 * t12;
    t14 = g2e[2] - g2s[2];
    t15 = g0s[2] - g2s[2] + t9 - d2 * t14;
    t16 = g1e[2] - g1s[2];
    t17 = g0s[2] - g1s[2] + t9 - d1 * t16;
    t18 = g2e[1] - g2s[1];
    t19 = g0s[1] - g2s[1] + t3 - d2 * t18;
    t0 = (g0s[1] + t3) * (t7 * t15 - t11 * t17) * (1.0 / 6.0) + (g0s[2] + t9) * (t11 * t13 - t7 * t19) * (1.0 / 6.0) -
         (g0s[0] + t5) * (t13 * t15 - t17 * t19) * (1.0 / 6.0);
}

void Volume2_df(double d0, double d1, double d2, const vector<double> &g0s, const vector<double> &g1s,
                const vector<double> &g2s, const vector<double> &g0e, const vector<double> &g1e,
                const vector<double> &g2e, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t20, t8, t9, t10, t23, t11, t12, t22, t13, t14, t25, t15, t16, t21, t17, t18, t24,
        t19, t26, t27, t28;
    t2 = g0e[0] - g0s[0];
    t3 = g0e[1] - g0s[1];
    t4 = d0 * t2;
    t5 = d0 * t3;
    t6 = g0e[2] - g0s[2];
    t7 = g1e[0] - g1s[0];
    t20 = d1 * t7;
    t8 = g0s[0] - g1s[0] + t4 - t20;
    t9 = d0 * t6;
    t10 = g2e[0] - g2s[0];
    t23 = d2 * t10;
    t11 = g0s[0] - g2s[0] + t4 - t23;
    t12 = g1e[1] - g1s[1];
    t22 = d1 * t12;
    t13 = g0s[1] - g1s[1] + t5 - t22;
    t14 = g1e[2] - g1s[2];
    t25 = d1 * t14;
    t15 = g0s[2] - g1s[2] + t9 - t25;
    t16 = g2e[1] - g2s[1];
    t21 = d2 * t16;
    t17 = g0s[1] - g2s[1] + t5 - t21;
    t18 = g2e[2] - g2s[2];
    t24 = d2 * t18;
    t19 = g0s[2] - g2s[2] + t9 - t24;
    t26 = g0s[2] + t9;
    t27 = g0s[1] + t5;
    t28 = g0s[0] + t4;
    A0[0][0] = t26 * (t3 * t8 - t3 * t11 - t2 * t13 + t2 * t17) * (-1.0 / 6.0) +
               t27 * (t6 * t8 - t2 * t15 - t6 * t11 + t2 * t19) * (1.0 / 6.0) +
               t28 * (t3 * t15 - t6 * t13 - t3 * t19 + t6 * t17) * (1.0 / 6.0) +
               t6 * (t11 * t13 - t8 * t17) * (1.0 / 6.0) - t3 * (t11 * t15 - t8 * t19) * (1.0 / 6.0) -
               t2 * (t13 * t19 - t15 * t17) * (1.0 / 6.0);
    A0[0][1] = t26 * (t11 * t12 - t7 * t17) * (-1.0 / 6.0) + t27 * (t11 * t14 - t7 * t19) * (1.0 / 6.0) +
               t28 * (t12 * t19 - t14 * t17) * (1.0 / 6.0);
    A0[0][2] = t26 * (t10 * t13 - t8 * t16) * (-1.0 / 6.0) + t27 * (t10 * t15 - t8 * t18) * (1.0 / 6.0) +
               t28 * (t13 * t18 - t15 * t16) * (1.0 / 6.0);
}

void Volume2_ddf(double d0, double d1, double d2, const vector<double> &g0s, const vector<double> &g1s,
                 const vector<double> &g2s, const vector<double> &g0e, const vector<double> &g1e,
                 const vector<double> &g2e, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t23, t8, t9, t20, t10, t11, t12, t24, t13, t14, t25, t15, t16, t21, t17, t18, t22,
        t19, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46,
        t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64;
    t2 = g0e[0] - g0s[0];
    t3 = g0e[1] - g0s[1];
    t4 = d0 * t2;
    t5 = d0 * t3;
    t6 = g0e[2] - g0s[2];
    t7 = g1e[0] - g1s[0];
    t23 = d1 * t7;
    t8 = g0s[0] - g1s[0] + t4 - t23;
    t9 = g2e[0] - g2s[0];
    t20 = d2 * t9;
    t10 = g0s[0] - g2s[0] + t4 - t20;
    t11 = d0 * t6;
    t12 = g1e[1] - g1s[1];
    t24 = d1 * t12;
    t13 = g0s[1] - g1s[1] + t5 - t24;
    t14 = g1e[2] - g1s[2];
    t25 = d1 * t14;
    t15 = g0s[2] - g1s[2] + t11 - t25;
    t16 = g2e[1] - g2s[1];
    t21 = d2 * t16;
    t17 = g0s[1] - g2s[1] + t5 - t21;
    t18 = g2e[2] - g2s[2];
    t22 = d2 * t18;
    t19 = g0s[2] - g2s[2] + t11 - t22;
    t26 = g0s[2] + t11;
    t27 = g0s[1] + t5;
    t28 = g0s[0] + t4;
    t29 = t10 * t12;
    t30 = t29 - t7 * t17;
    t31 = t10 * t14;
    t32 = t31 - t7 * t19;
    t33 = t3 * t32 * (1.0 / 6.0);
    t34 = t12 * t19;
    t35 = t2 * (t34 - t14 * t17) * (1.0 / 6.0);
    t36 = t3 * t7;
    t37 = t26 * (t36 - t2 * t12) * (1.0 / 6.0);
    t38 = t6 * t7;
    t39 = t38 - t2 * t14;
    t40 = t3 * t14;
    t41 = t40 - t6 * t12;
    t42 = t33 + t35 + t37 - t6 * t30 * (1.0 / 6.0) - t27 * t39 * (1.0 / 6.0) - t28 * t41 * (1.0 / 6.0);
    t43 = t9 * t13;
    t44 = t43 - t8 * t16;
    t45 = t9 * t15;
    t46 = t3 * (t45 - t8 * t18) * (1.0 / 6.0);
    t47 = t13 * t18;
    t48 = t47 - t15 * t16;
    t49 = t2 * t48 * (1.0 / 6.0);
    t50 = t3 * t9;
    t51 = t50 - t2 * t16;
    t52 = t6 * t9;
    t53 = t27 * (t52 - t2 * t18) * (1.0 / 6.0);
    t54 = t3 * t18;
    t55 = t54 - t6 * t16;
    t56 = t28 * t55 * (1.0 / 6.0);
    t57 = t46 + t49 + t53 + t56 - t6 * t44 * (1.0 / 6.0) - t26 * t51 * (1.0 / 6.0);
    t58 = t9 * t12;
    t59 = t26 * (t58 - t7 * t16) * (1.0 / 6.0);
    t60 = t9 * t14;
    t61 = t60 - t7 * t18;
    t62 = t12 * t18;
    t63 = t62 - t14 * t16;
    t64 = t59 - t27 * t61 * (1.0 / 6.0) - t28 * t63 * (1.0 / 6.0);
    A0[0][0] = t6 * (t3 * t8 - t3 * t10 - t2 * t13 + t2 * t17) * (-1.0 / 3.0) +
               t3 * (t6 * t8 - t6 * t10 - t2 * t15 + t2 * t19) * (1.0 / 3.0) +
               t2 * (t3 * t15 - t6 * t13 - t3 * t19 + t6 * t17) * (1.0 / 3.0);
    A0[0][1] = t42;
    A0[0][2] = t57;
    A0[1][0] = t42;
    A0[1][2] = t64;
    A0[2][0] = t57;
    A0[2][1] = t64;
}

/*void Volume_f(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , double &   t0 ) { double   t2,   t3,   t4,   t5,   t6, t7,
t8,   t9,   t10; t2 = p0[0]  -p1[0]  ; t3 = p0[0]  -p2[0]  ; t4 = p0[1]  -p1[1]
; t5 = p0[2]  -p2[2]  ; t6 = p0[2]  -p1[2]  ; t7 = p0[1]  -p2[1]  ; t8 = p1[0]
-p2[0]  ; t9 = p1[2]  -p2[2]  ; t10 = p1[1]  -p2[1]  ; t0 = p0[1]
*(t2*t5-t3*t6)*(1.0/6.0)+p0[2]  *(t3*t4-t2*t7)*(1.0/6.0)-p0[0]
*(t4*t5-t6*t7)*(1.0/6.0)+p1[1]  *(t2*t9-t6*t8)*(1.0/6.0)-p1[2]
*(t2*t10-t4*t8)*(1.0/6.0)-p1[0]  *(t4*t9-t6*t10)*(1.0/6.0)+p2[1]
*(t3*t9-t5*t8)*(1.0/6.0)-p2[2]  *(t3*t10-t7*t8)*(1.0/6.0)+p2[0]
*(t5*t10-t7*t9)*(1.0/6.0);

}


void Volume_df(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , ArrayVec<double> &   A0 ) { double   t2,   t3,   t4,   t5,
t6,   t7,   t8,   t9,   t10; t2 = p1[1]  -p2[1]  ; t3 = p1[2]  -p2[2]  ; t4 =
p1[0]  -p2[0]  ; t5 = p0[2]  -p2[2]  ; t6 = p0[2]  -p1[2]  ; t7 = p0[0]  -p1[0]
; t8 = p0[1]  -p2[1]  ; t9 = p0[1]  -p1[1]  ; t10 = p0[0]  -p2[0]  ; A0[0][0] =
p0[1]  *t3*(1.0/6.0)-p0[2]  *t2*(1.0/6.0)+p1[1]  *t3*(1.0/6.0)-p1[2]
*t2*(1.0/6.0)+p2[1]  *t3*(1.0/6.0)-p2[2]
*t2*(1.0/6.0)-t5*t9*(1.0/6.0)+t6*t8*(1.0/6.0); A0[0][1] = p0[0]
*t3*(-1.0/6.0)+p0[2]  *t4*(1.0/6.0)-p1[0]  *t3*(1.0/6.0)+p1[2]
*t4*(1.0/6.0)-p2[0]  *t3*(1.0/6.0)+p2[2]
*t4*(1.0/6.0)+t5*t7*(1.0/6.0)-t6*t10*(1.0/6.0); A0[0][2] = p0[0]
*t2*(1.0/6.0)-p0[1]  *t4*(1.0/6.0)+p1[0]  *t2*(1.0/6.0)-p1[1]
*t4*(1.0/6.0)+p2[0]  *t2*(1.0/6.0)-p2[1]
*t4*(1.0/6.0)-t7*t8*(1.0/6.0)+t9*t10*(1.0/6.0); A0[0][3] = p0[1]
*t5*(-1.0/6.0)+p0[2]  *t8*(1.0/6.0)-p1[1]  *t5*(1.0/6.0)+p1[2]
*t8*(1.0/6.0)-p2[1]  *t5*(1.0/6.0)+p2[2]
*t8*(1.0/6.0)+t2*t6*(1.0/6.0)-t3*t9*(1.0/6.0); A0[0][4] = p0[0]
*t5*(1.0/6.0)-p0[2]  *t10*(1.0/6.0)+p1[0]  *t5*(1.0/6.0)-p1[2]
*t10*(1.0/6.0)+p2[0]  *t5*(1.0/6.0)-p2[2]
*t10*(1.0/6.0)+t3*t7*(1.0/6.0)-t4*t6*(1.0/6.0); A0[0][5] = p0[0]
*t8*(-1.0/6.0)+p0[1]  *t10*(1.0/6.0)-p1[0]  *t8*(1.0/6.0)+p1[1]
*t10*(1.0/6.0)-p2[0]  *t8*(1.0/6.0)+p2[1]
*t10*(1.0/6.0)-t2*t7*(1.0/6.0)+t4*t9*(1.0/6.0); A0[0][6] = p0[1]
*t6*(1.0/6.0)-p0[2]  *t9*(1.0/6.0)+p1[1]  *t6*(1.0/6.0)-p1[2]
*t9*(1.0/6.0)+p2[1]  *t6*(1.0/6.0)-p2[2]
*t9*(1.0/6.0)+t2*t5*(1.0/6.0)-t3*t8*(1.0/6.0); A0[0][7] = p0[0]
*t6*(-1.0/6.0)+p0[2]  *t7*(1.0/6.0)-p1[0]  *t6*(1.0/6.0)+p1[2]
*t7*(1.0/6.0)-p2[0]  *t6*(1.0/6.0)+p2[2]
*t7*(1.0/6.0)-t4*t5*(1.0/6.0)+t3*t10*(1.0/6.0); A0[0][8] = p0[1]
*t7*(-1.0/6.0)+p0[0]  *t9*(1.0/6.0)-p1[1]  *t7*(1.0/6.0)+p1[0]
*t9*(1.0/6.0)-p2[1]  *t7*(1.0/6.0)+p2[0]
*t9*(1.0/6.0)-t2*t10*(1.0/6.0)+t4*t8*(1.0/6.0);

}


void Volume_ddf(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , ArrayVec<double> &   A0 ) { double   t2,   t3,   t4,   t5,
t6,   t7,   t8,   t9,   t10; t2 = p1[2]  *(1.0/2.0); t3 = p2[1]  *(1.0/2.0); t4
= p1[0]  *(1.0/2.0); t5 = p2[2]  *(1.0/2.0); t6 = p2[0]  *(1.0/2.0); t7 = p0[1]
*(1.0/2.0); t8 = p1[1]  *(1.0/2.0); t9 = p0[2]  *(1.0/2.0); t10 = p0[0]
*(1.0/2.0); A0[0][4] = p2[2]  *(-1.0/2.0); A0[0][5] = t3; A0[0][7] = t2;
  A0[0][8] = p1[1]  *(-1.0/2.0);
  A0[1][3] = t5;
  A0[1][5] = p2[0]  *(-1.0/2.0);
  A0[1][6] = -t2;
  A0[1][8] = t4;
  A0[2][3] = -t3;
  A0[2][4] = t6;
  A0[2][6] = t8;
  A0[2][7] = -t4;
  A0[3][1] = t5;
  A0[3][2] = -t3;
  A0[3][7] = p0[2]  *(-1.0/2.0);
  A0[3][8] = t7;
  A0[4][0] = -t5;
  A0[4][2] = t6;
  A0[4][6] = t9;
  A0[4][8] = p0[0]  *(-1.0/2.0);
  A0[5][0] = t3;
  A0[5][1] = -t6;
  A0[5][6] = -t7;
  A0[5][7] = t10;
  A0[6][1] = -t2;
  A0[6][2] = t8;
  A0[6][4] = t9;
  A0[6][5] = -t7;
  A0[7][0] = t2;
  A0[7][2] = -t4;
  A0[7][3] = -t9;
  A0[7][5] = t10;
  A0[8][0] = -t8;
  A0[8][1] = t4;
  A0[8][3] = t7;
  A0[8][4] = -t10;

}

void Volume_f(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , double &   t0 ) { double   t2,   t3,   t4,   t5,   t6, t7;
  t2 = p0[1-1]-p1[1-1];
  t3 = p0[1-1]-p2[1-1];
  t4 = p0[2-1]-p1[2-1];
  t5 = p0[3-1]-p2[3-1];
  t6 = p0[3-1]-p1[3-1];
  t7 = p0[2-1]-p2[2-1];
  t0 =
p0[2-1]*(t2*t5-t3*t6)*(1.0/6.0)+p0[3-1]*(t3*t4-t2*t7)*(1.0/6.0)-p0[1-1]*(t4*t5-t6*t7)*(1.0/6.0);

}


void Volume_df(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , ArrayVec<double> &   A0 ) { double   t2,   t3,   t4,   t5,
t6,   t7,   t8,   t9,   t10; t2 = p1[3-1]-p2[3-1]; t3 = p0[3-1]-p2[3-1]; t4 =
p0[3-1]-p1[3-1]; t5 = p1[1-1]-p2[1-1]; t6 = p1[2-1]-p2[2-1]; t7 =
p0[1-1]-p1[1-1]; t8 = p0[2-1]-p2[2-1]; t9 = p0[2-1]-p1[2-1]; t10 =
p0[1-1]-p2[1-1]; A0[0][0] =
p0[2-1]*t2*(1.0/6.0)-p0[3-1]*t6*(1.0/6.0)-t3*t9*(1.0/6.0)+t4*t8*(1.0/6.0);
  A0[0][1] =
p0[1-1]*t2*(-1.0/6.0)+p0[3-1]*t5*(1.0/6.0)+t3*t7*(1.0/6.0)-t4*t10*(1.0/6.0);
  A0[0][2] =
p0[1-1]*t6*(1.0/6.0)-p0[2-1]*t5*(1.0/6.0)-t7*t8*(1.0/6.0)+t9*t10*(1.0/6.0);
  A0[0][3] = p0[2-1]*t3*(-1.0/6.0)+p0[3-1]*t8*(1.0/6.0);
  A0[0][4] = p0[1-1]*t3*(1.0/6.0)-p0[3-1]*t10*(1.0/6.0);
  A0[0][5] = p0[1-1]*t8*(-1.0/6.0)+p0[2-1]*t10*(1.0/6.0);
  A0[0][6] = p0[2-1]*t4*(1.0/6.0)-p0[3-1]*t9*(1.0/6.0);
  A0[0][7] = p0[1-1]*t4*(-1.0/6.0)+p0[3-1]*t7*(1.0/6.0);
  A0[0][8] = p0[2-1]*t7*(-1.0/6.0)+p0[1-1]*t9*(1.0/6.0);

}


void Volume_ddf(const vector<double>& p0 , const vector<double>& p1 , const
vector<double>& p2 , ArrayVec<double> &   A0 ) { double   t2,   t3,   t4,   t5,
t6,   t7,   t8,   t9,   t10; t2 = p1[3-1]*(1.0/6.0); t3 = p2[2-1]*(1.0/6.0); t4
= p1[1-1]*(1.0/6.0); t5 = p2[3-1]*(1.0/6.0); t6 = p2[1-1]*(1.0/6.0); t7 =
p0[2-1]*(1.0/6.0); t8 = p1[2-1]*(1.0/6.0); t9 = p0[3-1]*(1.0/6.0); t10 =
p0[1-1]*(1.0/6.0); A0[0][4] = p2[3-1]*(-1.0/6.0); A0[0][5] = t3; A0[0][7] = t2;
  A0[0][8] = p1[2-1]*(-1.0/6.0);
  A0[1][3] = t5;
  A0[1][5] = p2[1-1]*(-1.0/6.0);
  A0[1][6] = -t2;
  A0[1][8] = t4;
  A0[2][3] = -t3;
  A0[2][4] = t6;
  A0[2][6] = t8;
  A0[2][7] = -t4;
  A0[3][1] = t5;
  A0[3][2] = -t3;
  A0[3][7] = p0[3-1]*(-1.0/6.0);
  A0[3][8] = t7;
  A0[4][0] = -t5;
  A0[4][2] = t6;
  A0[4][6] = t9;
  A0[4][8] = p0[1-1]*(-1.0/6.0);
  A0[5][0] = t3;
  A0[5][1] = -t6;
  A0[5][6] = -t7;
  A0[5][7] = t10;
  A0[6][1] = -t2;
  A0[6][2] = t8;
  A0[6][4] = t9;
  A0[6][5] = -t7;
  A0[7][0] = t2;
  A0[7][2] = -t4;
  A0[7][3] = -t9;
  A0[7][5] = t10;
  A0[8][0] = -t8;
  A0[8][1] = t4;
  A0[8][3] = t7;
  A0[8][4] = -t10;

} */

void Volume_f(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, double &t0)
{
    double t2, t3, t4, t5, t6, t7;
    t2 = p0[0] - p1[0];
    t3 = p0[0] - p2[0];
    t4 = p0[1] - p1[1];
    t5 = p0[2] - p2[2];
    t6 = p0[2] - p1[2];
    t7 = p0[1] - p2[1];
    t0 = p0[1] * (t2 * t5 - t3 * t6) * (1.0 / 6.0) + p0[2] * (t3 * t4 - t2 * t7) * (1.0 / 6.0) -
         p0[0] * (t4 * t5 - t6 * t7) * (1.0 / 6.0);
}

void Volume_df(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t2 = p1[2] - p2[2];
    t3 = p0[2] - p2[2];
    t4 = p0[2] - p1[2];
    t5 = p1[0] - p2[0];
    t6 = p1[1] - p2[1];
    t7 = p0[0] - p1[0];
    t8 = p0[1] - p2[1];
    t9 = p0[1] - p1[1];
    t10 = p0[0] - p2[0];
    A0[0][0] = p0[1] * t2 * (1.0 / 6.0) - p0[2] * t6 * (1.0 / 6.0) - t3 * t9 * (1.0 / 6.0) + t4 * t8 * (1.0 / 6.0);
    A0[0][1] = p0[0] * t2 * (-1.0 / 6.0) + p0[2] * t5 * (1.0 / 6.0) + t3 * t7 * (1.0 / 6.0) - t4 * t10 * (1.0 / 6.0);
    A0[0][2] = p0[0] * t6 * (1.0 / 6.0) - p0[1] * t5 * (1.0 / 6.0) - t7 * t8 * (1.0 / 6.0) + t9 * t10 * (1.0 / 6.0);
    A0[0][3] = p0[1] * t3 * (-1.0 / 6.0) + p0[2] * t8 * (1.0 / 6.0);
    A0[0][4] = p0[0] * t3 * (1.0 / 6.0) - p0[2] * t10 * (1.0 / 6.0);
    A0[0][5] = p0[0] * t8 * (-1.0 / 6.0) + p0[1] * t10 * (1.0 / 6.0);
    A0[0][6] = p0[1] * t4 * (1.0 / 6.0) - p0[2] * t9 * (1.0 / 6.0);
    A0[0][7] = p0[0] * t4 * (-1.0 / 6.0) + p0[2] * t7 * (1.0 / 6.0);
    A0[0][8] = p0[1] * t7 * (-1.0 / 6.0) + p0[0] * t9 * (1.0 / 6.0);
}

void Volume_ddf(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t2 = p1[2] * (1.0 / 6.0);
    t3 = p2[1] * (1.0 / 6.0);
    t4 = p1[0] * (1.0 / 6.0);
    t5 = p2[2] * (1.0 / 6.0);
    t6 = p2[0] * (1.0 / 6.0);
    t7 = p0[1] * (1.0 / 6.0);
    t8 = p1[1] * (1.0 / 6.0);
    t9 = p0[2] * (1.0 / 6.0);
    t10 = p0[0] * (1.0 / 6.0);
    A0[0][4] = p2[2] * (-1.0 / 6.0);
    A0[0][5] = t3;
    A0[0][7] = t2;
    A0[0][8] = p1[1] * (-1.0 / 6.0);
    A0[1][3] = t5;
    A0[1][5] = p2[0] * (-1.0 / 6.0);
    A0[1][6] = -t2;
    A0[1][8] = t4;
    A0[2][3] = -t3;
    A0[2][4] = t6;
    A0[2][6] = t8;
    A0[2][7] = -t4;
    A0[3][1] = t5;
    A0[3][2] = -t3;
    A0[3][7] = p0[2] * (-1.0 / 6.0);
    A0[3][8] = t7;
    A0[4][0] = -t5;
    A0[4][2] = t6;
    A0[4][6] = t9;
    A0[4][8] = p0[0] * (-1.0 / 6.0);
    A0[5][0] = t3;
    A0[5][1] = -t6;
    A0[5][6] = -t7;
    A0[5][7] = t10;
    A0[6][1] = -t2;
    A0[6][2] = t8;
    A0[6][4] = t9;
    A0[6][5] = -t7;
    A0[7][0] = t2;
    A0[7][2] = -t4;
    A0[7][3] = -t9;
    A0[7][5] = t10;
    A0[8][0] = -t8;
    A0[8][1] = t4;
    A0[8][3] = t7;
    A0[8][4] = -t10;
}

void Area_f(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, double &t0, double eps)
{
    double t3, t4, t6, t9, t2, t7, t8, t5, t10;
    // double eps = 0.0;
    t3 = p0[1 - 1] - p1[1 - 1];
    t4 = p0[1 - 1] - p2[1 - 1];
    t6 = p0[2 - 1] - p1[2 - 1];
    t9 = p0[2 - 1] - p2[2 - 1];
    t2 = -t4 * t6 + t3 * t9;
    t7 = p0[3 - 1] - p2[3 - 1];
    t8 = p0[3 - 1] - p1[3 - 1];
    t5 = -t3 * t7 + t4 * t8;
    t10 = t6 * t7 - t8 * t9;
    t0 = sqrt(t2 * t2 + t5 * t5 + t10 * t10 + eps) * (1.0 / 2.0);
}

void Area_df(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, ArrayVec<double> &A0,
             double eps)
{
    double t2, t3, t4, t5, t6, t13, t7, t8, t9, t10, t18, t11, t14, t15, t12, t16, t17, t19, t20, t21, t22, t23, t24,
        t25;
    // double eps = rsvsmath_automatic_eps_surf;
    t2 = p0[1 - 1] - p1[1 - 1];
    t3 = p0[1 - 1] - p2[1 - 1];
    t4 = p0[2 - 1] - p2[2 - 1];
    t5 = t2 * t4;
    t6 = p0[2 - 1] - p1[2 - 1];
    t13 = t3 * t6;
    t7 = t5 - t13;
    t8 = p0[3 - 1] - p2[3 - 1];
    t9 = t2 * t8;
    t10 = p0[3 - 1] - p1[3 - 1];
    t18 = t3 * t10;
    t11 = t9 - t18;
    t14 = t6 * t8;
    t15 = t4 * t10;
    t12 = -t14 + t15;
    t16 = p1[3 - 1] - p2[3 - 1];
    t17 = t7 * t7;
    t19 = t11 * t11;
    t20 = t14 - t15;
    t21 = p1[1 - 1] - p2[1 - 1];
    t22 = p1[2 - 1] - p2[2 - 1];
    t23 = t20 * t20;
    t24 = t17 + t19 + t23;
    t25 = 1.0 / sqrt(t24 + eps);
    A0[0][0] = (t11 * t16 * 2.0 + t7 * t22 * 2.0) * 1.0 / sqrt(t17 + t19 + t12 * t12 + eps) * (1.0 / 4.0);
    A0[0][1] = t25 * (t7 * t21 * 2.0 - t16 * t20 * 2.0) * (-1.0 / 4.0);
    A0[0][2] = t25 * (t11 * t21 * 2.0 + t20 * t22 * 2.0) * (-1.0 / 4.0);
    A0[0][3] = t25 * (t4 * t7 * 2.0 + t8 * t11 * 2.0) * (-1.0 / 4.0);
    A0[0][4] = t25 * (t3 * t7 * 2.0 - t8 * t20 * 2.0) * (1.0 / 4.0);
    A0[0][5] = t25 * (t3 * t11 * 2.0 + t4 * t20 * 2.0) * (1.0 / 4.0);
    A0[0][6] = t25 * (t6 * t7 * 2.0 + t10 * t11 * 2.0) * (1.0 / 4.0);
    A0[0][7] = t25 * (t2 * t7 * 2.0 - t10 * t20 * 2.0) * (-1.0 / 4.0);
    A0[0][8] = t25 * (t2 * t11 * 2.0 + t6 * t20 * 2.0) * (-1.0 / 4.0);
}

void Area_ddf(const vector<double> &p0, const vector<double> &p1, const vector<double> &p2, ArrayVec<double> &A0,
              double eps)
{
    // double eps = rsvsmath_automatic_eps_surf;
    double t2, t3, t5, t6, t8, t11, t13, t14, t4, t9, t10, t15, t16, t7, t20, t21, t12, t19, t23, t24, t17, t18, t22,
        t25, t26, t27, t28, t29, t30, t31, t32, t37, t33, t34, t35, t36, t38, t39, t40, t41, t42, t43, t44, t45, t46,
        t70, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t75, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66,
        t67, t68, t69, t71, t72, t73, t74, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90,
        t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110,
        t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121, t122, t123, t124, t125, t126, t127, t128,
        t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143, t144, t145, t146,
        t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160, t161, t162, t163, t164,
        t165, t166, t167, t168, t169, t170, t171, t172, t173, t174, t175, t176;
    t2 = p1[2 - 1] - p2[2 - 1];
    t3 = p1[3 - 1] - p2[3 - 1];
    t5 = p0[1 - 1] - p1[1 - 1];
    t6 = p0[1 - 1] - p2[1 - 1];
    t8 = p0[2 - 1] - p1[2 - 1];
    t11 = p0[2 - 1] - p2[2 - 1];
    t13 = t5 * t11;
    t14 = t6 * t8;
    t4 = t13 - t14;
    t9 = p0[3 - 1] - p2[3 - 1];
    t10 = p0[3 - 1] - p1[3 - 1];
    t15 = t5 * t9;
    t16 = t6 * t10;
    t7 = -t15 + t16;
    t20 = t8 * t9;
    t21 = t10 * t11;
    t12 = t20 - t21;
    t19 = t15 - t16;
    t23 = t2 * t4 * 2.0;
    t24 = t3 * t19 * 2.0;
    t17 = t23 + t24;
    t18 = t4 * t4;
    t22 = t12 * t12;
    t25 = t19 * t19;
    t26 = t18 + t22 + t25;
    t27 = 1.0 / pow(t26 + eps, 3.0 / 2.0);
    t28 = p1[1 - 1] - p2[1 - 1];
    t29 = 1.0 / sqrt(t26 + eps);
    t30 = t5 * t11 * 2.0;
    t31 = t5 * t9 * 2.0;
    t32 = t3 * t12 * 2.0;
    t37 = t4 * t28 * 2.0;
    t33 = t32 - t37;
    t34 = t2 * t28 * t29 * (-1.0 / 2.0) - t17 * t27 * t33 * (1.0 / 8.0);
    t35 = t3 * t3;
    t36 = t35 * 2.0;
    t38 = t32 - t37;
    t39 = t19 * t28 * 2.0;
    t40 = t2 * t12 * 2.0;
    t41 = t39 + t40;
    t42 = t4 * t11 * 2.0;
    t43 = t9 * t19 * 2.0;
    t44 = t42 + t43;
    t45 = t3 * t9 * 2.0;
    t46 = t4 * t6 * 2.0;
    t70 = t9 * t12 * 2.0;
    t47 = t46 - t70;
    t48 = t6 * t19 * 2.0;
    t49 = t11 * t12 * 2.0;
    t50 = t48 + t49;
    t51 = t6 * t8 * 2.0;
    t52 = t4 * t8 * 2.0;
    t53 = t10 * t19 * 2.0;
    t54 = t52 + t53;
    t55 = t3 * t10 * 2.0;
    t56 = t4 * t5 * 2.0;
    t75 = t10 * t12 * 2.0;
    t57 = t56 - t75;
    t58 = t8 * t9 * 2.0;
    t59 = t5 * t19 * 2.0;
    t60 = t8 * t12 * 2.0;
    t61 = t59 + t60;
    t62 = t17 * t27 * t41 * (1.0 / 8.0);
    t63 = t62 - t3 * t28 * t29 * (1.0 / 2.0);
    t64 = t27 * t41 * (t32 - t37) * (1.0 / 8.0);
    t65 = t64 - t2 * t3 * t29 * (1.0 / 2.0);
    t66 = t28 * t28;
    t67 = t66 * 2.0;
    t68 = t2 * t2;
    t69 = t68 * 2.0;
    t71 = t6 * t28 * 2.0;
    t72 = t2 * t11 * 2.0;
    t73 = t6 * t10 * 2.0;
    t74 = t10 * t11 * 2.0;
    t76 = t5 * t28 * 2.0;
    t77 = t2 * t8 * 2.0;
    t78 = t45 + t72;
    t79 = t17 * t27 * t44 * (1.0 / 8.0);
    t80 = t79 - t29 * t78 * (1.0 / 4.0);
    t81 = t11 * t28 * 2.0;
    t82 = -t30 + t51 + t81;
    t83 = t29 * t82 * (1.0 / 4.0);
    t84 = t27 * t44 * (t32 - t37) * (1.0 / 8.0);
    t85 = t83 + t84;
    t86 = t9 * t28 * 2.0;
    t87 = -t31 + t73 + t86;
    t88 = t29 * t87 * (1.0 / 4.0);
    t89 = t88 - t27 * t41 * t44 * (1.0 / 8.0);
    t90 = t2 * t6 * 2.0;
    t91 = t45 + t71;
    t92 = t29 * t91 * (-1.0 / 4.0) - t27 * t33 * t47 * (1.0 / 8.0);
    t93 = t2 * t9 * 2.0;
    t94 = -t58 + t74 + t93;
    t95 = t29 * t94 * (1.0 / 4.0);
    t96 = t27 * t41 * t47 * (1.0 / 8.0);
    t97 = t95 + t96;
    t98 = t27 * t44 * t47 * (1.0 / 8.0);
    t99 = t98 - t6 * t11 * t29 * (1.0 / 2.0);
    t100 = t9 * t9;
    t101 = t100 * 2.0;
    t102 = t9 * t10 * 2.0;
    t103 = t3 * t6 * 2.0;
    t104 = t3 * t11 * 2.0;
    t105 = t71 + t72;
    t106 = t27 * t41 * t50 * (1.0 / 8.0);
    t107 = t106 - t29 * t105 * (1.0 / 4.0);
    t108 = t27 * t44 * t50 * (1.0 / 8.0);
    t109 = t108 - t6 * t9 * t29 * (1.0 / 2.0);
    t110 = t9 * t11 * t29 * (-1.0 / 2.0) - t27 * t47 * t50 * (1.0 / 8.0);
    t111 = t6 * t6;
    t112 = t111 * 2.0;
    t113 = t11 * t11;
    t114 = t113 * 2.0;
    t115 = t5 * t6 * 2.0;
    t116 = t8 * t11 * 2.0;
    t117 = t55 + t77;
    t118 = t29 * t117 * (1.0 / 4.0);
    t119 = t118 - t17 * t27 * t54 * (1.0 / 8.0);
    t120 = t8 * t28 * 2.0;
    t121 = -t30 + t51 + t120;
    t122 = t29 * t121 * (-1.0 / 4.0) - t27 * t33 * t54 * (1.0 / 8.0);
    t123 = t10 * t28 * 2.0;
    t124 = -t31 + t73 + t123;
    t125 = t27 * t41 * t54 * (1.0 / 8.0);
    t126 = t125 - t29 * t124 * (1.0 / 4.0);
    t127 = t102 + t116;
    t128 = t27 * t44 * t54 * (1.0 / 8.0);
    t129 = t128 - t29 * t127 * (1.0 / 4.0);
    t130 = t30 - t6 * t8 * 4.0;
    t131 = t29 * t130 * (-1.0 / 4.0) - t27 * t47 * t54 * (1.0 / 8.0);
    t132 = t31 - t6 * t10 * 4.0;
    t133 = t29 * t132 * (-1.0 / 4.0) - t27 * t50 * t54 * (1.0 / 8.0);
    t134 = t2 * t5 * 2.0;
    t135 = t17 * t27 * t57 * (1.0 / 8.0);
    t136 = t55 + t76;
    t137 = t29 * t136 * (1.0 / 4.0);
    t138 = t27 * t57 * (t32 - t37) * (1.0 / 8.0);
    t139 = t137 + t138;
    t140 = t2 * t10 * 2.0;
    t141 = -t58 + t74 + t140;
    t142 = t29 * t141 * (-1.0 / 4.0) - t27 * t41 * t57 * (1.0 / 8.0);
    t143 = t51 - t5 * t11 * 4.0;
    t144 = t29 * t143 * (-1.0 / 4.0) - t27 * t44 * t57 * (1.0 / 8.0);
    t145 = t102 + t115;
    t146 = t27 * t47 * t57 * (1.0 / 8.0);
    t147 = t146 - t29 * t145 * (1.0 / 4.0);
    t148 = t58 - t10 * t11 * 4.0;
    t149 = t27 * t50 * t57 * (1.0 / 8.0);
    t150 = t149 - t29 * t148 * (1.0 / 4.0);
    t151 = t27 * t54 * t57 * (1.0 / 8.0);
    t152 = t151 - t5 * t8 * t29 * (1.0 / 2.0);
    t153 = t10 * t10;
    t154 = t153 * 2.0;
    t155 = t3 * t5 * 2.0;
    t156 = t17 * t27 * t61 * (1.0 / 8.0);
    t157 = t3 * t8 * 2.0;
    t158 = t27 * t61 * (t32 - t37) * (1.0 / 8.0);
    t159 = t76 + t77;
    t160 = t29 * t159 * (1.0 / 4.0);
    t161 = t160 - t27 * t41 * t61 * (1.0 / 8.0);
    t162 = t73 - t5 * t9 * 4.0;
    t163 = t29 * t162 * (-1.0 / 4.0) - t27 * t44 * t61 * (1.0 / 8.0);
    t164 = t74 - t8 * t9 * 4.0;
    t165 = t27 * t47 * t61 * (1.0 / 8.0);
    t166 = t165 - t29 * t164 * (1.0 / 4.0);
    t167 = t115 + t116;
    t168 = t27 * t50 * t61 * (1.0 / 8.0);
    t169 = t168 - t29 * t167 * (1.0 / 4.0);
    t170 = t27 * t54 * t61 * (1.0 / 8.0);
    t171 = t170 - t5 * t10 * t29 * (1.0 / 2.0);
    t172 = t8 * t10 * t29 * (-1.0 / 2.0) - t27 * t57 * t61 * (1.0 / 8.0);
    t173 = t5 * t5;
    t174 = t173 * 2.0;
    t175 = t8 * t8;
    t176 = t175 * 2.0;
    A0[0][0] = (t36 + t69) * 1.0 / sqrt(t18 + t22 + t7 * t7 + eps) * (1.0 / 4.0) - (t17 * t17) * t27 * (1.0 / 8.0);
    A0[0][1] = t34;
    A0[0][2] = t63;
    A0[0][3] = t80;
    A0[0][4] = t29 * (t30 + t90 - t6 * t8 * 2.0) * (1.0 / 4.0) - t17 * t27 * t47 * (1.0 / 8.0);
    A0[0][5] = t29 * (t31 + t103 - t6 * t10 * 2.0) * (1.0 / 4.0) - t17 * t27 * t50 * (1.0 / 8.0);
    A0[0][6] = t119;
    A0[0][7] = t135 - t29 * (t30 + t134 - t6 * t8 * 2.0) * (1.0 / 4.0);
    A0[0][8] = t156 - t29 * (t31 + t155 - t6 * t10 * 2.0) * (1.0 / 4.0);
    A0[1][0] = t34;
    A0[1][1] = t29 * (t36 + t67) * (1.0 / 4.0) - t27 * (t38 * t38) * (1.0 / 8.0);
    A0[1][2] = t65;
    A0[1][3] = t85;
    A0[1][4] = t92;
    A0[1][5] = t29 * (t58 + t104 - t10 * t11 * 2.0) * (1.0 / 4.0) - t27 * t33 * t50 * (1.0 / 8.0);
    A0[1][6] = t122;
    A0[1][7] = t139;
    A0[1][8] = t158 - t29 * (t58 + t157 - t10 * t11 * 2.0) * (1.0 / 4.0);
    A0[2][0] = t63;
    A0[2][1] = t65;
    A0[2][2] = t29 * (t67 + t69) * (1.0 / 4.0) - t27 * (t41 * t41) * (1.0 / 8.0);
    A0[2][3] = t89;
    A0[2][4] = t97;
    A0[2][5] = t107;
    A0[2][6] = t126;
    A0[2][7] = t142;
    A0[2][8] = t161;
    A0[3][0] = t80;
    A0[3][1] = t85;
    A0[3][2] = t89;
    A0[3][3] = t29 * (t101 + t114) * (1.0 / 4.0) - t27 * (t44 * t44) * (1.0 / 8.0);
    A0[3][4] = t99;
    A0[3][5] = t109;
    A0[3][6] = t129;
    A0[3][7] = t144;
    A0[3][8] = t163;
    A0[4][0] = t29 * (t30 - t51 + t90) * (1.0 / 4.0) - t17 * t27 * t47 * (1.0 / 8.0);
    A0[4][1] = t92;
    A0[4][2] = t97;
    A0[4][3] = t99;
    A0[4][4] = t29 * (t101 + t112) * (1.0 / 4.0) - t27 * (t47 * t47) * (1.0 / 8.0);
    A0[4][5] = t110;
    A0[4][6] = t131;
    A0[4][7] = t147;
    A0[4][8] = t166;
    A0[5][0] = t29 * (t31 - t73 + t103) * (1.0 / 4.0) - t17 * t27 * t50 * (1.0 / 8.0);
    A0[5][1] = t29 * (t58 - t74 + t104) * (1.0 / 4.0) - t27 * t33 * t50 * (1.0 / 8.0);
    A0[5][2] = t107;
    A0[5][3] = t109;
    A0[5][4] = t110;
    A0[5][5] = t29 * (t112 + t114) * (1.0 / 4.0) - t27 * (t50 * t50) * (1.0 / 8.0);
    A0[5][6] = t133;
    A0[5][7] = t150;
    A0[5][8] = t169;
    A0[6][0] = t119;
    A0[6][1] = t122;
    A0[6][2] = t126;
    A0[6][3] = t129;
    A0[6][4] = t131;
    A0[6][5] = t133;
    A0[6][6] = t29 * (t154 + t176) * (1.0 / 4.0) - t27 * (t54 * t54) * (1.0 / 8.0);
    A0[6][7] = t152;
    A0[6][8] = t171;
    A0[7][0] = t135 - t29 * (t30 - t51 + t134) * (1.0 / 4.0);
    A0[7][1] = t139;
    A0[7][2] = t142;
    A0[7][3] = t144;
    A0[7][4] = t147;
    A0[7][5] = t150;
    A0[7][6] = t152;
    A0[7][7] = t29 * (t154 + t174) * (1.0 / 4.0) - t27 * (t57 * t57) * (1.0 / 8.0);
    A0[7][8] = t172;
    A0[8][0] = t156 - t29 * (t31 - t73 + t155) * (1.0 / 4.0);
    A0[8][1] = t158 - t29 * (t58 - t74 + t157) * (1.0 / 4.0);
    A0[8][2] = t161;
    A0[8][3] = t163;
    A0[8][4] = t166;
    A0[8][5] = t169;
    A0[8][6] = t171;
    A0[8][7] = t172;
    A0[8][8] = t29 * (t174 + t176) * (1.0 / 4.0) - t27 * (t61 * t61) * (1.0 / 8.0);
}

void LengthEdge_f(const vector<double> &p0, const vector<double> &p1, double &t0)
{
    double t2, t3, t4;
    t2 = p0[1 - 1] - p1[1 - 1];
    t3 = p0[2 - 1] - p1[2 - 1];
    t4 = p0[3 - 1] - p1[3 - 1];
    t0 = sqrt(t2 * t2 + t3 * t3 + t4 * t4);
}

void LengthEdge_df(const vector<double> &p0, const vector<double> &p1, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
    t2 = p0[1 - 1] - p1[1 - 1];
    t3 = p0[2 - 1] - p1[2 - 1];
    t4 = p0[3 - 1] - p1[3 - 1];
    t5 = t2 * t2;
    t6 = t3 * t3;
    t7 = t4 * t4;
    t8 = t5 + t6 + t7;
    t9 = 1.0 / sqrt(t8);
    t10 = p0[1 - 1] * 2.0;
    t11 = p1[1 - 1] * 2.0;
    t12 = t10 - t11;
    t13 = t9 * t12 * (1.0 / 2.0);
    t14 = p0[2 - 1] * 2.0;
    t15 = p1[2 - 1] * 2.0;
    t16 = t14 - t15;
    t17 = t9 * t16 * (1.0 / 2.0);
    t18 = p0[3 - 1] * 2.0;
    t19 = p1[3 - 1] * 2.0;
    t20 = t18 - t19;
    t21 = t9 * t20 * (1.0 / 2.0);
    A0[0][0] = t13;
    A0[0][1] = t17;
    A0[0][2] = t21;
    A0[0][3] = -t13;
    A0[0][4] = -t17;
    A0[0][5] = -t21;
}

void LengthEdge_ddf(const vector<double> &p0, const vector<double> &p1, ArrayVec<double> &A0)
{
    double t10, t11, t2, t3, t4, t5, t6, t7, t8, t9, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24,
        t25, t26, t27, t28, t29, t30, t31;
    t10 = p0[1 - 1] * 2.0;
    t11 = p1[1 - 1] * 2.0;
    t2 = t10 - t11;
    t3 = p0[1 - 1] - p1[1 - 1];
    t4 = p0[2 - 1] - p1[2 - 1];
    t5 = p0[3 - 1] - p1[3 - 1];
    t6 = t3 * t3;
    t7 = t4 * t4;
    t8 = t5 * t5;
    t9 = t6 + t7 + t8;
    t12 = 1.0 / pow(t9, 3.0 / 2.0);
    t13 = t2 * t2;
    t14 = 1.0 / sqrt(t9);
    t15 = p0[2 - 1] * 2.0;
    t16 = p1[2 - 1] * 2.0;
    t17 = t15 - t16;
    t18 = p0[3 - 1] * 2.0;
    t19 = p1[3 - 1] * 2.0;
    t20 = t18 - t19;
    t21 = t2 * t12 * t17 * (1.0 / 4.0);
    t22 = t17 * t17;
    t23 = t2 * t12 * t20 * (1.0 / 4.0);
    t24 = t12 * t17 * t20 * (1.0 / 4.0);
    t25 = t20 * t20;
    t26 = t12 * t13 * (1.0 / 4.0);
    t27 = -t14 + t26;
    t28 = t12 * t22 * (1.0 / 4.0);
    t29 = -t14 + t28;
    t30 = t12 * t25 * (1.0 / 4.0);
    t31 = -t14 + t30;
    A0[0][0] = t14 - t12 * t13 * (1.0 / 4.0);
    A0[0][1] = t2 * t12 * t17 * (-1.0 / 4.0);
    A0[0][2] = t2 * t12 * t20 * (-1.0 / 4.0);
    A0[0][3] = t27;
    A0[0][4] = t21;
    A0[0][5] = t23;
    A0[1][0] = -t21;
    A0[1][1] = t14 - t12 * t22 * (1.0 / 4.0);
    A0[1][2] = t12 * t17 * t20 * (-1.0 / 4.0);
    A0[1][3] = t21;
    A0[1][4] = t29;
    A0[1][5] = t24;
    A0[2][0] = -t23;
    A0[2][1] = -t24;
    A0[2][2] = t14 - t12 * t25 * (1.0 / 4.0);
    A0[2][3] = t23;
    A0[2][4] = t24;
    A0[2][5] = t31;
    A0[3][0] = t27;
    A0[3][1] = t21;
    A0[3][2] = t23;
    A0[3][3] = t14 - t26;
    A0[3][4] = -t21;
    A0[3][5] = -t23;
    A0[4][0] = t21;
    A0[4][1] = t29;
    A0[4][2] = t24;
    A0[4][3] = -t21;
    A0[4][4] = t14 - t28;
    A0[4][5] = -t24;
    A0[5][0] = t23;
    A0[5][1] = t24;
    A0[5][2] = t31;
    A0[5][3] = -t23;
    A0[5][4] = -t24;
    A0[5][5] = t14 - t30;
}

void SurfIntersect_f(const vector<double> &p1, const vector<double> &p2, const vector<double> &v0,
                     const vector<double> &v01, const vector<double> &v02, const vector<double> &v11,
                     const vector<double> &v12, const vector<double> &c, double &t0)
{
    double t2, t3, t4, t5, t6, t7, t14, t8, t9, t10, t16, t11, t12, t20, t13, t15, t17, t18, t19, t21, t22, t23, t24;
    t2 = p1[2 - 1] - p2[2 - 1];
    t3 = v01[1 - 1] + v02[1 - 1] - v11[1 - 1] - v12[1 - 1];
    t4 = p1[1 - 1] - p2[1 - 1];
    t5 = p1[3 - 1] - p2[3 - 1];
    t6 = t2 * t3;
    t7 = v01[2 - 1] + v02[2 - 1] - v11[2 - 1] - v12[2 - 1];
    t14 = t4 * t7;
    t8 = t6 - t14;
    t9 = v01[3 - 1] + v02[3 - 1] - v11[3 - 1] - v12[3 - 1];
    t10 = t3 * t5;
    t16 = t4 * t9;
    t11 = t10 - t16;
    t12 = t2 * t9;
    t20 = t5 * t7;
    t13 = t12 - t20;
    t15 = t2 * t8;
    t17 = t5 * t11;
    t18 = t15 + t17;
    t19 = t4 * t8;
    t21 = t5 * t13;
    t22 = t19 + t21;
    t23 = t2 * t13;
    t24 = t23 - t4 * t11;
    t0 = (p1[2 - 1] * (t19 + t5 * (t12 - t20)) + c[1 - 1] * t18 - c[2 - 1] * t22 + c[3 - 1] * t24 - p1[1 - 1] * t18 -
          p1[3 - 1] * t24) /
         (t18 * (c[1 - 1] - v0[1 - 1]) - t22 * (c[2 - 1] - v0[2 - 1]) + t24 * (c[3 - 1] - v0[3 - 1]));
}

void SurfIntersect_df(const vector<double> &p1, const vector<double> &p2, const vector<double> &v0,
                      const vector<double> &v01, const vector<double> &v02, const vector<double> &v11,
                      const vector<double> &v12, const vector<double> &c, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t19, t8, t9, t10, t21, t11, t12, t28, t13, t33, t14, t34, t15, t16, t17, t18, t20,
        t22, t23, t24, t25, t26, t27, t29, t30, t37, t31, t32, t35, t36, t42, t38, t39, t40, t43, t41, t44, t45, t46,
        t55, t56, t57, t47, t48, t49, t54, t50, t53, t51, t52, t58, t59, t60, t61, t62, t63, t64, t66, t65, t67, t68,
        t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80;
    t2 = p1[2 - 1] - p2[2 - 1];
    t3 = v01[1 - 1] + v02[1 - 1] - v11[1 - 1] - v12[1 - 1];
    t4 = p1[1 - 1] - p2[1 - 1];
    t5 = p1[3 - 1] - p2[3 - 1];
    t6 = t2 * t3;
    t7 = v01[2 - 1] + v02[2 - 1] - v11[2 - 1] - v12[2 - 1];
    t19 = t4 * t7;
    t8 = t6 - t19;
    t9 = v01[3 - 1] + v02[3 - 1] - v11[3 - 1] - v12[3 - 1];
    t10 = t3 * t5;
    t21 = t4 * t9;
    t11 = t10 - t21;
    t12 = t2 * t9;
    t28 = t5 * t7;
    t13 = t12 - t28;
    t33 = t4 * t7 * 2.0;
    t14 = t6 - t33;
    t34 = t4 * t9 * 2.0;
    t15 = t10 - t34;
    t16 = t2 * t7;
    t17 = t5 * t9;
    t18 = t16 + t17;
    t20 = t2 * t8;
    t22 = t5 * t11;
    t23 = c[1 - 1] - v0[1 - 1];
    t24 = t20 + t22;
    t25 = t23 * t24;
    t26 = c[2 - 1] - v0[2 - 1];
    t27 = t4 * t8;
    t29 = c[3 - 1] - v0[3 - 1];
    t30 = t2 * t13;
    t37 = t4 * t11;
    t31 = t30 - t37;
    t32 = t29 * t31;
    t35 = t5 * (t12 - t28);
    t36 = t27 + t35;
    t42 = t26 * t36;
    t38 = t25 + t32 - t42;
    t39 = t3 * t4;
    t40 = t17 + t39;
    t43 = t2 * t9 * 2.0;
    t41 = t28 - t43;
    t44 = c[1 - 1] * t24;
    t45 = c[3 - 1] * (t30 - t37);
    t46 = p1[2 - 1] * t36;
    t55 = c[2 - 1] * t36;
    t56 = p1[1 - 1] * t24;
    t57 = p1[3 - 1] * t31;
    t47 = t44 + t45 + t46 - t55 - t56 - t57;
    t48 = 1.0 / t38;
    t49 = t16 + t39;
    t54 = t5 * t7 * 2.0;
    t50 = t12 - t54;
    t53 = t3 * t5 * 2.0;
    t51 = t21 - t53;
    t52 = 1.0 / pow(t25 + t32 - t42, 2.0);
    t58 = c[2 - 1] * t14;
    t59 = c[3 - 1] * t15;
    t60 = c[1 - 1] * t18;
    t61 = t14 * t26;
    t62 = t15 * t29;
    t63 = t18 * t23;
    t64 = t61 + t62 + t63;
    t66 = t2 * t3 * 2.0;
    t65 = t19 - t66;
    t67 = p1[2 - 1] * t40;
    t68 = p1[3 - 1] * t41;
    t69 = p1[1 - 1] * t65;
    t70 = t26 * t40;
    t71 = t29 * t41;
    t72 = t23 * t65;
    t73 = t70 + t71 + t72;
    t74 = t47 * t52 * t73;
    t75 = c[3 - 1] * t49;
    t76 = t29 * t49;
    t77 = t23 * t51;
    t78 = t26 * t50;
    t79 = t76 + t77 + t78;
    t80 = t47 * t52 * t79;
    A0[0][0] = -(t20 + t22 + t58 + t59 + t60 - p1[2 - 1] * t14 - p1[3 - 1] * t15 - p1[1 - 1] * t18) /
                   (t25 + t32 - t26 * (t27 + t5 * t13)) +
               1.0 / (t38 * t38) * t47 * t64;
    A0[0][1] = t74 + t48 * (t27 + t35 + t67 + t68 + t69 - c[2 - 1] * t40 - c[3 - 1] * t41 - c[1 - 1] * t65);
    A0[0][2] = t80 - t48 * (t30 - t37 + t75 + c[1 - 1] * t51 + c[2 - 1] * t50 - p1[1 - 1] * t51 - p1[2 - 1] * t50 -
                            p1[3 - 1] * t49);
    A0[0][3] = t48 * (t58 + t59 + t60 - p1[2 - 1] * t14 - p1[3 - 1] * t15 - p1[1 - 1] * t18) - t47 * t52 * t64;
    A0[0][4] = -t74 - t48 * (t67 + t68 + t69 - c[2 - 1] * t40 - c[3 - 1] * t41 - c[1 - 1] * t65);
    A0[0][5] = -t80 + t48 * (t75 - p1[1 - 1] * t51 - p1[2 - 1] * t50 - p1[3 - 1] * t49 + c[2 - 1] * (t12 - t54) +
                             c[1 - 1] * (t21 - t53));
}

void SurfIntersect_ddf(const vector<double> &p1, const vector<double> &p2, const vector<double> &v0,
                       const vector<double> &v01, const vector<double> &v02, const vector<double> &v11,
                       const vector<double> &v12, const vector<double> &c, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t27, t8, t9, t10, t29, t11, t12, t34, t13, t14, t15, t21, t22, t16, t17, t18, t24,
        t25, t19, t20, t23, t26, t28, t30, t31, t32, t33, t35, t40, t36, t37, t38, t39, t49, t50, t41, t47, t42, t48,
        t43, t44, t45, t46, t51, t52, t53, t54, t55, t56, t57, t58, t59, t77, t78, t79, t60, t65, t61, t62, t63, t66,
        t64, t67, t68, t73, t74, t75, t69, t70, t71, t72, t76, t80, t83, t81, t84, t82, t85, t86, t87, t88, t89, t90,
        t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110,
        t111, t112, t113, t114, t115, t116, t117, t118, t127, t128, t129, t119, t120, t121, t122, t125, t126, t123,
        t124, t130, t131, t147, t148, t149, t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143,
        t144, t145, t146, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160, t161, t162, t163, t176,
        t177, t164, t165, t166, t167, t168, t169, t170, t171, t172, t183, t184, t173, t174, t175, t178, t179, t180,
        t181, t182, t185, t186, t187, t188, t189, t190, t191, t192, t193, t194, t195, t196, t197, t198, t199;
    t2 = p1[2 - 1] - p2[2 - 1];
    t3 = v01[1 - 1] + v02[1 - 1] - v11[1 - 1] - v12[1 - 1];
    t4 = p1[1 - 1] - p2[1 - 1];
    t5 = p1[3 - 1] - p2[3 - 1];
    t6 = t2 * t3;
    t7 = v01[2 - 1] + v02[2 - 1] - v11[2 - 1] - v12[2 - 1];
    t27 = t4 * t7;
    t8 = t6 - t27;
    t9 = v01[3 - 1] + v02[3 - 1] - v11[3 - 1] - v12[3 - 1];
    t10 = t3 * t5;
    t29 = t4 * t9;
    t11 = t10 - t29;
    t12 = t2 * t9;
    t34 = t5 * t7;
    t13 = t12 - t34;
    t14 = v01[2 - 1] * 2.0;
    t15 = v02[2 - 1] * 2.0;
    t21 = v11[2 - 1] * 2.0;
    t22 = v12[2 - 1] * 2.0;
    t16 = t14 + t15 - t21 - t22;
    t17 = v01[3 - 1] * 2.0;
    t18 = v02[3 - 1] * 2.0;
    t24 = v11[3 - 1] * 2.0;
    t25 = v12[3 - 1] * 2.0;
    t19 = t17 + t18 - t24 - t25;
    t20 = c[2 - 1] - v0[2 - 1];
    t23 = c[3 - 1] - v0[3 - 1];
    t26 = c[1 - 1] - v0[1 - 1];
    t28 = t2 * t8;
    t30 = t5 * t11;
    t31 = t28 + t30;
    t32 = t26 * t31;
    t33 = t4 * t8;
    t35 = t2 * t13;
    t40 = t4 * t11;
    t36 = t35 - t40;
    t37 = t23 * t36;
    t38 = t5 * (t12 - t34);
    t39 = t33 + t38;
    t49 = t20 * t39;
    t50 = t32 + t37 - t49;
    t41 = 1.0 / (t50 * t50);
    t47 = t4 * t7 * 2.0;
    t42 = t6 - t47;
    t48 = t4 * t9 * 2.0;
    t43 = t10 - t48;
    t44 = t2 * t7;
    t45 = t5 * t9;
    t46 = t44 + t45;
    t51 = t20 * t42;
    t52 = t23 * t43;
    t53 = t26 * t46;
    t54 = t51 + t52 + t53;
    t55 = c[1 - 1] * t31;
    t56 = p1[2 - 1] * t39;
    t57 = c[2 - 1] * t42;
    t58 = c[3 - 1] * t43;
    t59 = c[1 - 1] * t46;
    t77 = p1[2 - 1] * t42;
    t78 = p1[3 - 1] * t43;
    t79 = p1[1 - 1] * t46;
    t60 = t28 + t30 + t57 + t58 + t59 - t77 - t78 - t79;
    t65 = t2 * t3 * 2.0;
    t61 = t27 - t65;
    t62 = t3 * t4;
    t63 = t45 + t62;
    t66 = t2 * t9 * 2.0;
    t64 = t34 - t66;
    t67 = 1.0 / pow(t32 + t37 - t49, 2.0);
    t68 = c[3 - 1] * (t35 - t40);
    t73 = c[2 - 1] * t39;
    t74 = p1[1 - 1] * t31;
    t75 = p1[3 - 1] * t36;
    t69 = t55 + t56 + t68 - t73 - t74 - t75;
    t70 = 1.0 / (t50 * t50 * t50);
    t71 = t20 * t63;
    t72 = t23 * t64;
    t76 = 1.0 / t50;
    t80 = t44 + t62;
    t83 = t3 * t5 * 2.0;
    t81 = t29 - t83;
    t84 = t5 * t7 * 2.0;
    t82 = t12 - t84;
    t85 = t23 * t80;
    t86 = t26 * t81;
    t87 = t20 * t82;
    t88 = c[2 - 1] * t16;
    t89 = c[3 - 1] * t19;
    t90 = t16 * t20;
    t91 = t19 * t23;
    t92 = t90 + t91;
    t93 = t54 * t54;
    t94 = t69 * t70 * t93 * 2.0;
    t95 = c[2 - 1] * t3;
    t96 = c[1 - 1] * t7;
    t97 = t26 * (t27 - t65);
    t98 = t71 + t72 + t97;
    t99 = t3 * t20;
    t100 = t7 * t26;
    t101 = t99 + t100;
    t102 = t67 * t69 * t101;
    t103 = p1[1 - 1] * (t27 - t65);
    t104 = p1[2 - 1] * t63;
    t105 = p1[3 - 1] * t64;
    t106 = t54 * t69 * t70 * t98 * 2.0;
    t107 = c[3 - 1] * t3;
    t108 = c[1 - 1] * t9;
    t109 = t3 * t23;
    t110 = t9 * t26;
    t111 = t109 + t110;
    t112 = t67 * t69 * t111;
    t113 = c[3 - 1] * t80;
    t114 = t85 + t86 + t87;
    t115 = t54 * t69 * t70 * t114 * 2.0;
    t116 = p1[2 - 1] * t3;
    t117 = p1[1 - 1] * t7;
    t118 = t60 * t67 * t98;
    t127 = c[1 - 1] * t61;
    t128 = c[2 - 1] * t63;
    t129 = c[3 - 1] * t64;
    t119 = t33 + t38 + t103 + t104 + t105 - t127 - t128 - t129;
    t120 = t54 * t67 * t119;
    t121 = v01[1 - 1] * 2.0;
    t122 = v02[1 - 1] * 2.0;
    t125 = v11[1 - 1] * 2.0;
    t126 = v12[1 - 1] * 2.0;
    t123 = t121 + t122 - t125 - t126;
    t124 = t5 * t9 * 2.0;
    t130 = c[1 - 1] * t81;
    t131 = c[2 - 1] * t82;
    t147 = p1[3 - 1] * t80;
    t148 = p1[1 - 1] * t81;
    t149 = p1[2 - 1] * t82;
    t132 = t35 - t40 + t113 + t130 + t131 - t147 - t148 - t149;
    t133 = t57 + t58 + t59 - t77 - t78 - t79;
    t134 = c[1 - 1] * t123;
    t135 = t26 * t123;
    t136 = t91 + t135;
    t137 = t98 * t98;
    t138 = t69 * t70 * t137 * 2.0;
    t139 = c[3 - 1] * t7;
    t140 = c[2 - 1] * t9;
    t141 = t7 * t23;
    t142 = t9 * t20;
    t143 = t141 + t142;
    t144 = t67 * t69 * t143;
    t145 = c[1 - 1] * (t29 - t83);
    t146 = c[2 - 1] * (t12 - t84);
    t150 = p1[3 - 1] * t3;
    t151 = p1[1 - 1] * t9;
    t152 = t60 * t67 * t114;
    t153 = p1[3 - 1] * t7;
    t154 = p1[2 - 1] * t9;
    t155 = t67 * t119 * (t85 + t86 + t87);
    t156 = t69 * t70 * t98 * (t85 + t86 + t87) * 2.0;
    t157 = t3 * t4 * 2.0;
    t158 = t2 * t7 * 2.0;
    t159 = t85 + t86 + t87;
    t160 = t103 + t104 + t105 - t127 - t128 - t129;
    t161 = t90 + t135;
    t162 = t113 + t145 + t146 - t147 - t148 - t149;
    t163 = t85 + t86 + t87;
    t176 = p1[2 - 1] * t16;
    t177 = p1[3 - 1] * t19;
    t164 = t44 + t45 + t88 + t89 - t176 - t177;
    t165 = t67 * t69 * t92;
    t166 = t54 * t60 * t67;
    t167 = t54 * t67 * t133;
    t168 = -t94 + t165 + t166 + t167 - t76 * t164;
    t169 = t6 - t47 - t95 - t96 + t116 + t117;
    t170 = t67 * t98 * t133;
    t171 = -t102 - t106 - t120 + t170 - t76 * t169;
    t172 = t10 - t48 - t107 - t108 + t150 + t151;
    t183 = p1[1 - 1] * (t29 - t83);
    t184 = p1[2 - 1] * (t12 - t84);
    t173 = t54 * t67 * (t35 - t40 + t113 + t130 + t131 - t147 - t183 - t184);
    t174 = t67 * t133 * (t85 + t86 + t87);
    t175 = -t112 - t115 + t173 + t174 - t76 * t172;
    t178 = t54 * t69 * t70 * (t85 + t86 + t87) * 2.0;
    t179 = t27 - t65 - t95 - t96 + t116 + t117;
    t180 = t54 * t67 * t160;
    t181 = t67 * t69 * t136;
    t182 = t34 - t66 - t139 - t140 + t153 + t154;
    t185 = t95 + t96 - t116 - t117;
    t186 = t102 + t106 - t170 + t180 - t76 * t185;
    t187 = t67 * t98 * t162;
    t188 = t29 - t83 - t107 - t108 + t150 + t151;
    t189 = t12 - t84 - t139 - t140 + t153 + t154;
    t190 = -t144 + t187 - t76 * t189 - t67 * t114 * t119 - t69 * t70 * t98 * t114 * 2.0;
    t191 = t67 * t69 * t161;
    t192 = t67 * t162 * (t85 + t86 + t87);
    t193 = t85 + t86 + t87;
    t194 = t107 + t108 - t150 - t151;
    t195 = t54 * t67 * t162;
    t196 = t139 + t140 - t153 - t154;
    t197 = t67 * t160 * (t85 + t86 + t87);
    t198 = t144 + t156 - t187 + t197 - t76 * t196;
    t199 = t85 + t86 + t87;
    A0[0][0] = t94 +
               (t88 + t89 + t124 + t158 - p1[2 - 1] * t16 - p1[3 - 1] * t19) / (t32 + t37 - t20 * (t33 + t5 * t13)) -
               t41 * t92 * (t55 + t56 + c[3 - 1] * t36 - c[2 - 1] * t39 - p1[1 - 1] * t31 - p1[3 - 1] * t36) -
               t41 * t54 * t60 * 2.0;
    A0[0][1] = t102 + t106 + t120 - t76 * (t6 + t27 + t95 + t96 - p1[2 - 1] * t3 - p1[1 - 1] * t7) -
               t41 * t60 * (t71 + t72 + t26 * t61);
    A0[0][2] = t112 + t115 - t76 * (t10 + t29 + t107 + t108 - p1[3 - 1] * t3 - p1[1 - 1] * t9) - t60 * t67 * t114 -
               t54 * t67 * t132;
    A0[0][3] = t168;
    A0[0][4] = -t102 - t106 + t118 - t76 * t179 -
               t54 * t67 * (t103 + t104 + t105 - c[1 - 1] * t61 - c[2 - 1] * t63 - c[3 - 1] * t64);
    A0[0][5] = -t112 - t115 + t152 - t76 * t188 +
               t54 * t67 * (t113 + t145 + t146 - p1[1 - 1] * t81 - p1[3 - 1] * t80 - p1[2 - 1] * t82);
    A0[1][0] = t102 + t106 - t118 + t120 - t76 * (t6 + t27 + t95 + t96 - t116 - t117);
    A0[1][1] = t138 + t76 * (t89 + t124 + t134 + t157 - p1[3 - 1] * t19 - p1[1 - 1] * t123) - t67 * t69 * t136 +
               t67 * t98 * t119 * 2.0;
    A0[1][2] =
        t144 + t155 + t156 - t76 * (t12 + t34 + t139 + t140 - p1[3 - 1] * t7 - p1[2 - 1] * t9) - t67 * t98 * t132;
    A0[1][3] = t171;
    A0[1][4] = -t138 + t181 - t76 * (t45 + t62 + t89 + t134 - p1[3 - 1] * t19 - p1[1 - 1] * t123) - t67 * t98 * t119 -
               t67 * t98 * t160;
    A0[1][5] = t190;
    A0[2][0] = t112 - t152 + t178 - t76 * (t10 + t29 + t107 + t108 - t150 - t151) - t54 * t67 * t132;
    A0[2][1] = t144 + t155 + t156 - t76 * (t12 + t34 + t139 + t140 - t153 - t154) - t67 * t98 * t132;
    A0[2][2] = t76 * (t88 + t134 + t157 + t158 - p1[2 - 1] * t16 - p1[1 - 1] * t123) + t69 * t70 * (t159 * t159) * 2.0 -
               t67 * t69 * t161 - t67 * t114 * t132 * 2.0;
    A0[2][3] = t175;
    A0[2][4] = -t144 - t76 * t182 +
               t67 * t98 * (t35 - t40 + t113 + t130 + t131 - t147 - p1[2 - 1] * (t12 - t84) - p1[1 - 1] * (t29 - t83)) -
               t67 * t114 * t160 - t69 * t70 * t98 * t114 * 2.0;
    A0[2][5] = t191 + t192 - t76 * (t44 + t62 + t88 + t134 - p1[2 - 1] * t16 - p1[1 - 1] * t123) -
               t69 * t70 * (t163 * t163) * 2.0 +
               t67 * (t85 + t86 + t87) *
                   (t35 - t40 + t113 + t130 + t131 - t147 - p1[2 - 1] * (t12 - t84) - p1[1 - 1] * (t29 - t83));
    A0[3][0] = t168;
    A0[3][1] = t171;
    A0[3][2] = t175;
    A0[3][3] = t94 - t165 + t76 * (t88 + t89 - t176 - t177) - t54 * t67 * t133 * 2.0;
    A0[3][4] = t186;
    A0[3][5] = t112 + t178 - t76 * t194 - t54 * t67 * t162 - t67 * t114 * t133;
    A0[4][0] = -t102 - t106 + t118 - t180 - t76 * t179;
    A0[4][1] =
        -t138 + t181 - t76 * (t45 + t62 + t89 + t134 - t177 - p1[1 - 1] * t123) - t67 * t98 * t119 - t67 * t98 * t160;
    A0[4][2] = -t144 - t76 * t182 - t67 * t114 * t160 +
               t67 * t98 * (t35 - t40 + t113 + t130 + t131 - t147 - t183 - t184) - t69 * t70 * t98 * t114 * 2.0;
    A0[4][3] = t186;
    A0[4][4] = t138 - t181 + t76 * (t89 + t134 - t177 - p1[1 - 1] * t123) + t67 * t98 * t160 * 2.0;
    A0[4][5] = t198;
    A0[5][0] = -t112 - t115 + t195 - t76 * t188 + t60 * t67 * (t85 + t86 + t87);
    A0[5][1] = t190;
    A0[5][2] = t191 + t192 - t76 * (t44 + t62 + t88 + t134 - t176 - p1[1 - 1] * t123) +
               t67 * (t85 + t86 + t87) * (t35 - t40 + t113 + t130 + t131 - t147 - t183 - t184) -
               t69 * t70 * (t193 * t193) * 2.0;
    A0[5][3] = t112 + t178 - t195 - t76 * t194 - t67 * t114 * t133;
    A0[5][4] = t198;
    A0[5][5] = -t191 + t76 * (t88 + t134 - t176 - p1[1 - 1] * t123) + t69 * t70 * (t199 * t199) * 2.0 -
               t67 * t114 * t162 * 2.0;
}

void SurfCentroid4_f(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                     const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroid4_df(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                      const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t28, t18, t19, t49, t20, t21, t22,
        t23, t24, t25, t26, t27, t29, t30, t31, t32, t33, t34, t35, t36, t37, t45, t38, t39, t40, t41, t42, t43, t44,
        t46, t47, t48, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t69, t67,
        t74, t68, t70, t71, t73, t72, t75, t76, t77, t78, t81, t79, t86, t80, t82, t83, t85, t84, t87, t88, t89, t90,
        t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110,
        t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121, t122, t123, t124, t125, t126, t127, t128,
        t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[1 - 1] - x[4 - 1];
    t6 = y[1 - 1] - y[4 - 1];
    t7 = z[1 - 1] - z[4 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10 + rsvsmath_automatic_eps_centre2;
    t12 = x[1 - 1] * 2.0;
    t13 = x[1 - 1] * (1.0 / 2.0);
    t14 = t5 * t5;
    t15 = t6 * t6;
    t16 = t7 * t7;
    t17 = t14 + t15 + t16 + rsvsmath_automatic_eps_centre2;
    t28 = x[2 - 1] * 2.0;
    t18 = t12 - t28;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t49 = x[4 - 1] * 2.0;
    t20 = t12 - t49;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t17);
    t22 = 1.0 / totD;
    t23 = sqrt(t11);
    t24 = t23 * (1.0 / 2.0);
    t25 = x[2 - 1] - x[3 - 1];
    t26 = y[2 - 1] - y[3 - 1];
    t27 = z[2 - 1] - z[3 - 1];
    t29 = x[2 - 1] * (1.0 / 2.0);
    t30 = t13 + t29;
    t31 = t18 * t19 * t30 * (1.0 / 2.0);
    t32 = t25 * t25;
    t33 = t26 * t26;
    t34 = t27 * t27;
    t35 = t32 + t33 + t34 + rsvsmath_automatic_eps_centre2;
    t36 = 1.0 / (totD * totD);
    t37 = t18 * t19 * (1.0 / 2.0);
    t45 = x[3 - 1] * 2.0;
    t38 = t28 - t45;
    t39 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t35);
    t40 = sqrt(t35);
    t41 = t40 * (1.0 / 2.0);
    t42 = x[3 - 1] - x[4 - 1];
    t43 = y[3 - 1] - y[4 - 1];
    t44 = z[3 - 1] - z[4 - 1];
    t46 = x[3 - 1] * (1.0 / 2.0);
    t47 = t29 + t46;
    t48 = t38 * t39 * t47 * (1.0 / 2.0);
    t50 = x[4 - 1] * (1.0 / 2.0);
    t51 = t42 * t42;
    t52 = t43 * t43;
    t53 = t44 * t44;
    t54 = t51 + t52 + t53 + rsvsmath_automatic_eps_centre2;
    t55 = t45 - t49;
    t56 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t54);
    t57 = sqrt(t17);
    t58 = t57 * (1.0 / 2.0);
    t59 = sqrt(t54);
    t60 = t59 * (1.0 / 2.0);
    t61 = t13 + t50;
    t62 = t20 * t21 * t61 * (1.0 / 2.0);
    t63 = t46 + t50;
    t64 = t55 * t56 * t63 * (1.0 / 2.0);
    t65 = t20 * t21 * (1.0 / 2.0);
    t66 = y[1 - 1] * 2.0;
    t69 = y[2 - 1] * 2.0;
    t67 = t66 - t69;
    t74 = y[4 - 1] * 2.0;
    t68 = t66 - t74;
    t70 = t19 * t30 * t67 * (1.0 / 2.0);
    t71 = t19 * t67 * (1.0 / 2.0);
    t73 = y[3 - 1] * 2.0;
    t72 = t69 - t73;
    t75 = t73 - t74;
    t76 = t21 * t61 * t68 * (1.0 / 2.0);
    t77 = t21 * t68 * (1.0 / 2.0);
    t78 = z[1 - 1] * 2.0;
    t81 = z[2 - 1] * 2.0;
    t79 = t78 - t81;
    t86 = z[4 - 1] * 2.0;
    t80 = t78 - t86;
    t82 = t19 * t30 * t79 * (1.0 / 2.0);
    t83 = t19 * t79 * (1.0 / 2.0);
    t85 = z[3 - 1] * 2.0;
    t84 = t81 - t85;
    t87 = t85 - t86;
    t88 = t21 * t61 * t80 * (1.0 / 2.0);
    t89 = t21 * t80 * (1.0 / 2.0);
    t90 = y[1 - 1] * (1.0 / 2.0);
    t91 = t37 + t65;
    t92 = y[2 - 1] * (1.0 / 2.0);
    t93 = t90 + t92;
    t94 = t18 * t19 * t93 * (1.0 / 2.0);
    t95 = t38 * t39 * (1.0 / 2.0);
    t96 = y[3 - 1] * (1.0 / 2.0);
    t97 = t92 + t96;
    t98 = y[4 - 1] * (1.0 / 2.0);
    t99 = t55 * t56 * (1.0 / 2.0);
    t100 = t90 + t98;
    t101 = t20 * t21 * t100 * (1.0 / 2.0);
    t102 = t96 + t98;
    t103 = t65 + t99;
    t104 = t71 + t77;
    t105 = t19 * t67 * t93 * (1.0 / 2.0);
    t106 = t39 * t72 * (1.0 / 2.0);
    t107 = t39 * t72 * t97 * (1.0 / 2.0);
    t108 = t56 * t75 * (1.0 / 2.0);
    t109 = t21 * t68 * t100 * (1.0 / 2.0);
    t110 = t56 * t75 * t102 * (1.0 / 2.0);
    t111 = t77 + t108;
    t112 = t83 + t89;
    t113 = t19 * t79 * t93 * (1.0 / 2.0);
    t114 = t39 * t84 * (1.0 / 2.0);
    t115 = t56 * t87 * (1.0 / 2.0);
    t116 = t21 * t80 * t100 * (1.0 / 2.0);
    t117 = t89 + t115;
    t118 = z[1 - 1] * (1.0 / 2.0);
    t119 = z[2 - 1] * (1.0 / 2.0);
    t120 = t118 + t119;
    t121 = t18 * t19 * t120 * (1.0 / 2.0);
    t122 = t37 - t95;
    t123 = z[3 - 1] * (1.0 / 2.0);
    t124 = t119 + t123;
    t125 = z[4 - 1] * (1.0 / 2.0);
    t126 = t95 - t99;
    t127 = t118 + t125;
    t128 = t20 * t21 * t127 * (1.0 / 2.0);
    t129 = t123 + t125;
    t130 = t19 * t67 * t120 * (1.0 / 2.0);
    t131 = t71 - t106;
    t132 = t106 - t108;
    t133 = t21 * t68 * t127 * (1.0 / 2.0);
    t134 = t19 * t79 * t120 * (1.0 / 2.0);
    t135 = t83 - t114;
    t136 = t39 * t84 * t124 * (1.0 / 2.0);
    t137 = t114 - t115;
    t138 = t21 * t80 * t127 * (1.0 / 2.0);
    t139 = t56 * t87 * t129 * (1.0 / 2.0);
    A0[0][0] = t22 * (t24 + t31 + t58 + t62) - X_dot_d * t36 * t91;
    A0[0][1] = t22 * (t24 - t31 + t41 + t48) + X_dot_d * t36 * (t37 - t38 * t39 * (1.0 / 2.0));
    A0[0][2] = t22 * (t41 - t48 + t60 + t64) + X_dot_d * t36 * (t95 - t55 * t56 * (1.0 / 2.0));
    A0[0][3] = t22 * (t58 + t60 - t62 - t64) + X_dot_d * t36 * t103;
    A0[0][4] = t22 * (t70 + t76) - X_dot_d * t36 * t104;
    A0[0][5] = -t22 * (t70 - t39 * t47 * t72 * (1.0 / 2.0)) + X_dot_d * t36 * (t71 - t39 * t72 * (1.0 / 2.0));
    A0[0][6] = -t22 * (t39 * t47 * t72 * (1.0 / 2.0) - t56 * t63 * t75 * (1.0 / 2.0)) +
               X_dot_d * t36 * (t106 - t56 * t75 * (1.0 / 2.0));
    A0[0][7] = -t22 * (t76 + t56 * t63 * t75 * (1.0 / 2.0)) + X_dot_d * t36 * t111;
    A0[0][8] = t22 * (t82 + t88) - X_dot_d * t36 * t112;
    A0[0][9] = -t22 * (t82 - t39 * t47 * t84 * (1.0 / 2.0)) + X_dot_d * t36 * (t83 - t39 * t84 * (1.0 / 2.0));
    A0[0][10] = -t22 * (t39 * t47 * t84 * (1.0 / 2.0) - t56 * t63 * t87 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t114 - t56 * t87 * (1.0 / 2.0));
    A0[0][11] = -t22 * (t88 + t56 * t63 * t87 * (1.0 / 2.0)) + X_dot_d * t36 * t117;
    A0[1][0] = t22 * (t94 + t101) - Y_dot_d * t36 * t91;
    A0[1][1] = -t22 * (t94 - t38 * t39 * t97 * (1.0 / 2.0)) + Y_dot_d * t36 * t122;
    A0[1][2] = -t22 * (t38 * t39 * t97 * (1.0 / 2.0) - t55 * t56 * t102 * (1.0 / 2.0)) + Y_dot_d * t36 * t126;
    A0[1][3] = -t22 * (t101 + t55 * t56 * t102 * (1.0 / 2.0)) + Y_dot_d * t36 * t103;
    A0[1][4] = t22 * (t24 + t58 + t105 + t109) - Y_dot_d * t36 * t104;
    A0[1][5] = t22 * (t24 + t41 - t105 + t107) + Y_dot_d * t36 * t131;
    A0[1][6] = t22 * (t41 + t60 - t107 + t110) + Y_dot_d * t36 * t132;
    A0[1][7] = t22 * (t58 + t60 - t109 - t110) + Y_dot_d * t36 * t111;
    A0[1][8] = t22 * (t113 + t116) - Y_dot_d * t36 * t112;
    A0[1][9] = -t22 * (t113 - t39 * t84 * t97 * (1.0 / 2.0)) + Y_dot_d * t36 * t135;
    A0[1][10] = -t22 * (t39 * t84 * t97 * (1.0 / 2.0) - t56 * t87 * t102 * (1.0 / 2.0)) + Y_dot_d * t36 * t137;
    A0[1][11] = -t22 * (t116 + t56 * t87 * t102 * (1.0 / 2.0)) + Y_dot_d * t36 * t117;
    A0[2][0] = t22 * (t121 + t128) - Z_dot_d * t36 * t91;
    A0[2][1] = -t22 * (t121 - t38 * t39 * t124 * (1.0 / 2.0)) + Z_dot_d * t36 * t122;
    A0[2][2] = -t22 * (t38 * t39 * t124 * (1.0 / 2.0) - t55 * t56 * t129 * (1.0 / 2.0)) + Z_dot_d * t36 * t126;
    A0[2][3] = -t22 * (t128 + t55 * t56 * t129 * (1.0 / 2.0)) + Z_dot_d * t36 * t103;
    A0[2][4] = t22 * (t130 + t133) - Z_dot_d * t36 * t104;
    A0[2][5] = -t22 * (t130 - t39 * t72 * t124 * (1.0 / 2.0)) + Z_dot_d * t36 * t131;
    A0[2][6] = -t22 * (t39 * t72 * t124 * (1.0 / 2.0) - t56 * t75 * t129 * (1.0 / 2.0)) + Z_dot_d * t36 * t132;
    A0[2][7] = -t22 * (t133 + t56 * t75 * t129 * (1.0 / 2.0)) + Z_dot_d * t36 * t111;
    A0[2][8] = t22 * (t24 + t58 + t134 + t138) - Z_dot_d * t36 * t112;
    A0[2][9] = t22 * (t24 + t41 - t134 + t136) + Z_dot_d * t36 * t135;
    A0[2][10] = t22 * (t41 + t60 - t136 + t139) + Z_dot_d * t36 * t137;
    A0[2][11] = t22 * (t58 + t60 - t138 - t139) + Z_dot_d * t36 * t117;
}

void SurfCentroid5_f(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                     const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroid5_df(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                      const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t28, t18, t19, t64, t20, t21, t22,
        t23, t24, t25, t26, t27, t29, t30, t31, t32, t33, t34, t35, t36, t37, t45, t38, t39, t40, t41, t42, t43, t44,
        t46, t47, t48, t49, t50, t51, t52, t60, t53, t54, t55, t56, t57, t58, t59, t61, t62, t63, t65, t66, t67, t68,
        t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t84, t82, t91, t83, t85, t86, t88, t87, t90,
        t89, t92, t93, t94, t95, t98, t96, t105, t97, t99, t100, t102, t101, t104, t103, t106, t107, t108, t109, t110,
        t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121, t122, t123, t124, t125, t126, t127, t128,
        t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143, t144, t145, t146,
        t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160, t161, t162, t163, t164,
        t165, t166, t167, t168, t169, t170;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[1 - 1] - x[5 - 1];
    t6 = y[1 - 1] - y[5 - 1];
    t7 = z[1 - 1] - z[5 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10 + rsvsmath_automatic_eps_centre2;
    t12 = x[1 - 1] * 2.0;
    t13 = x[1 - 1] * (1.0 / 2.0);
    t14 = t5 * t5;
    t15 = t6 * t6;
    t16 = t7 * t7;
    t17 = t14 + t15 + t16 + rsvsmath_automatic_eps_centre2;
    t28 = x[2 - 1] * 2.0;
    t18 = t12 - t28;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t64 = x[5 - 1] * 2.0;
    t20 = t12 - t64;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t17);
    t22 = 1.0 / totD;
    t23 = sqrt(t11);
    t24 = t23 * (1.0 / 2.0);
    t25 = x[2 - 1] - x[3 - 1];
    t26 = y[2 - 1] - y[3 - 1];
    t27 = z[2 - 1] - z[3 - 1];
    t29 = x[2 - 1] * (1.0 / 2.0);
    t30 = t13 + t29;
    t31 = t18 * t19 * t30 * (1.0 / 2.0);
    t32 = t25 * t25;
    t33 = t26 * t26;
    t34 = t27 * t27;
    t35 = t32 + t33 + t34 + rsvsmath_automatic_eps_centre2;
    t36 = 1.0 / (totD * totD);
    t37 = t18 * t19 * (1.0 / 2.0);
    t45 = x[3 - 1] * 2.0;
    t38 = t28 - t45;
    t39 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t35);
    t40 = sqrt(t35);
    t41 = t40 * (1.0 / 2.0);
    t42 = x[3 - 1] - x[4 - 1];
    t43 = y[3 - 1] - y[4 - 1];
    t44 = z[3 - 1] - z[4 - 1];
    t46 = x[3 - 1] * (1.0 / 2.0);
    t47 = t29 + t46;
    t48 = t38 * t39 * t47 * (1.0 / 2.0);
    t49 = t42 * t42;
    t50 = t43 * t43;
    t51 = t44 * t44;
    t52 = t49 + t50 + t51 + rsvsmath_automatic_eps_centre2;
    t60 = x[4 - 1] * 2.0;
    t53 = t45 - t60;
    t54 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t52);
    t55 = sqrt(t52);
    t56 = t55 * (1.0 / 2.0);
    t57 = x[4 - 1] - x[5 - 1];
    t58 = y[4 - 1] - y[5 - 1];
    t59 = z[4 - 1] - z[5 - 1];
    t61 = x[4 - 1] * (1.0 / 2.0);
    t62 = t46 + t61;
    t63 = t53 * t54 * t62 * (1.0 / 2.0);
    t65 = x[5 - 1] * (1.0 / 2.0);
    t66 = t57 * t57;
    t67 = t58 * t58;
    t68 = t59 * t59;
    t69 = t66 + t67 + t68 + rsvsmath_automatic_eps_centre2;
    t70 = t60 - t64;
    t71 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t69);
    t72 = sqrt(t17);
    t73 = t72 * (1.0 / 2.0);
    t74 = sqrt(t69);
    t75 = t74 * (1.0 / 2.0);
    t76 = t13 + t65;
    t77 = t20 * t21 * t76 * (1.0 / 2.0);
    t78 = t61 + t65;
    t79 = t70 * t71 * t78 * (1.0 / 2.0);
    t80 = t20 * t21 * (1.0 / 2.0);
    t81 = y[1 - 1] * 2.0;
    t84 = y[2 - 1] * 2.0;
    t82 = t81 - t84;
    t91 = y[5 - 1] * 2.0;
    t83 = t81 - t91;
    t85 = t19 * t30 * t82 * (1.0 / 2.0);
    t86 = t19 * t82 * (1.0 / 2.0);
    t88 = y[3 - 1] * 2.0;
    t87 = t84 - t88;
    t90 = y[4 - 1] * 2.0;
    t89 = t88 - t90;
    t92 = t90 - t91;
    t93 = t21 * t76 * t83 * (1.0 / 2.0);
    t94 = t21 * t83 * (1.0 / 2.0);
    t95 = z[1 - 1] * 2.0;
    t98 = z[2 - 1] * 2.0;
    t96 = t95 - t98;
    t105 = z[5 - 1] * 2.0;
    t97 = t95 - t105;
    t99 = t19 * t30 * t96 * (1.0 / 2.0);
    t100 = t19 * t96 * (1.0 / 2.0);
    t102 = z[3 - 1] * 2.0;
    t101 = t98 - t102;
    t104 = z[4 - 1] * 2.0;
    t103 = t102 - t104;
    t106 = t104 - t105;
    t107 = t21 * t76 * t97 * (1.0 / 2.0);
    t108 = t21 * t97 * (1.0 / 2.0);
    t109 = y[1 - 1] * (1.0 / 2.0);
    t110 = t37 + t80;
    t111 = y[2 - 1] * (1.0 / 2.0);
    t112 = t109 + t111;
    t113 = t18 * t19 * t112 * (1.0 / 2.0);
    t114 = t38 * t39 * (1.0 / 2.0);
    t115 = y[3 - 1] * (1.0 / 2.0);
    t116 = t111 + t115;
    t117 = t53 * t54 * (1.0 / 2.0);
    t118 = y[4 - 1] * (1.0 / 2.0);
    t119 = t115 + t118;
    t120 = y[5 - 1] * (1.0 / 2.0);
    t121 = t70 * t71 * (1.0 / 2.0);
    t122 = t109 + t120;
    t123 = t20 * t21 * t122 * (1.0 / 2.0);
    t124 = t118 + t120;
    t125 = t80 + t121;
    t126 = t86 + t94;
    t127 = t19 * t82 * t112 * (1.0 / 2.0);
    t128 = t39 * t87 * (1.0 / 2.0);
    t129 = t39 * t87 * t116 * (1.0 / 2.0);
    t130 = t54 * t89 * (1.0 / 2.0);
    t131 = t54 * t89 * t119 * (1.0 / 2.0);
    t132 = t71 * t92 * (1.0 / 2.0);
    t133 = t21 * t83 * t122 * (1.0 / 2.0);
    t134 = t71 * t92 * t124 * (1.0 / 2.0);
    t135 = t94 + t132;
    t136 = t100 + t108;
    t137 = t19 * t96 * t112 * (1.0 / 2.0);
    t138 = t39 * t101 * (1.0 / 2.0);
    t139 = t54 * t103 * (1.0 / 2.0);
    t140 = t71 * t106 * (1.0 / 2.0);
    t141 = t21 * t97 * t122 * (1.0 / 2.0);
    t142 = t108 + t140;
    t143 = z[1 - 1] * (1.0 / 2.0);
    t144 = z[2 - 1] * (1.0 / 2.0);
    t145 = t143 + t144;
    t146 = t18 * t19 * t145 * (1.0 / 2.0);
    t147 = t37 - t114;
    t148 = z[3 - 1] * (1.0 / 2.0);
    t149 = t144 + t148;
    t150 = t114 - t117;
    t151 = z[4 - 1] * (1.0 / 2.0);
    t152 = t148 + t151;
    t153 = z[5 - 1] * (1.0 / 2.0);
    t154 = t117 - t121;
    t155 = t143 + t153;
    t156 = t20 * t21 * t155 * (1.0 / 2.0);
    t157 = t151 + t153;
    t158 = t19 * t82 * t145 * (1.0 / 2.0);
    t159 = t86 - t128;
    t160 = t128 - t130;
    t161 = t130 - t132;
    t162 = t21 * t83 * t155 * (1.0 / 2.0);
    t163 = t19 * t96 * t145 * (1.0 / 2.0);
    t164 = t100 - t138;
    t165 = t39 * t101 * t149 * (1.0 / 2.0);
    t166 = t138 - t139;
    t167 = t54 * t103 * t152 * (1.0 / 2.0);
    t168 = t139 - t140;
    t169 = t21 * t97 * t155 * (1.0 / 2.0);
    t170 = t71 * t106 * t157 * (1.0 / 2.0);
    A0[0][0] = t22 * (t24 + t31 + t73 + t77) - X_dot_d * t36 * t110;
    A0[0][1] = t22 * (t24 - t31 + t41 + t48) + X_dot_d * t36 * (t37 - t38 * t39 * (1.0 / 2.0));
    A0[0][2] = t22 * (t41 - t48 + t56 + t63) + X_dot_d * t36 * (t114 - t53 * t54 * (1.0 / 2.0));
    A0[0][3] = t22 * (t56 - t63 + t75 + t79) + X_dot_d * t36 * (t117 - t70 * t71 * (1.0 / 2.0));
    A0[0][4] = t22 * (t73 + t75 - t77 - t79) + X_dot_d * t36 * t125;
    A0[0][5] = t22 * (t85 + t93) - X_dot_d * t36 * t126;
    A0[0][6] = -t22 * (t85 - t39 * t47 * t87 * (1.0 / 2.0)) + X_dot_d * t36 * (t86 - t39 * t87 * (1.0 / 2.0));
    A0[0][7] = -t22 * (t39 * t47 * t87 * (1.0 / 2.0) - t54 * t62 * t89 * (1.0 / 2.0)) +
               X_dot_d * t36 * (t128 - t54 * t89 * (1.0 / 2.0));
    A0[0][8] = -t22 * (t54 * t62 * t89 * (1.0 / 2.0) - t71 * t78 * t92 * (1.0 / 2.0)) +
               X_dot_d * t36 * (t130 - t71 * t92 * (1.0 / 2.0));
    A0[0][9] = -t22 * (t93 + t71 * t78 * t92 * (1.0 / 2.0)) + X_dot_d * t36 * t135;
    A0[0][10] = t22 * (t99 + t107) - X_dot_d * t36 * t136;
    A0[0][11] = -t22 * (t99 - t39 * t47 * t101 * (1.0 / 2.0)) + X_dot_d * t36 * (t100 - t39 * t101 * (1.0 / 2.0));
    A0[0][12] = -t22 * (t39 * t47 * t101 * (1.0 / 2.0) - t54 * t62 * t103 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t138 - t54 * t103 * (1.0 / 2.0));
    A0[0][13] = -t22 * (t54 * t62 * t103 * (1.0 / 2.0) - t71 * t78 * t106 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t139 - t71 * t106 * (1.0 / 2.0));
    A0[0][14] = -t22 * (t107 + t71 * t78 * t106 * (1.0 / 2.0)) + X_dot_d * t36 * t142;
    A0[1][0] = t22 * (t113 + t123) - Y_dot_d * t36 * t110;
    A0[1][1] = -t22 * (t113 - t38 * t39 * t116 * (1.0 / 2.0)) + Y_dot_d * t36 * t147;
    A0[1][2] = -t22 * (t38 * t39 * t116 * (1.0 / 2.0) - t53 * t54 * t119 * (1.0 / 2.0)) + Y_dot_d * t36 * t150;
    A0[1][3] = -t22 * (t53 * t54 * t119 * (1.0 / 2.0) - t70 * t71 * t124 * (1.0 / 2.0)) + Y_dot_d * t36 * t154;
    A0[1][4] = -t22 * (t123 + t70 * t71 * t124 * (1.0 / 2.0)) + Y_dot_d * t36 * t125;
    A0[1][5] = t22 * (t24 + t73 + t127 + t133) - Y_dot_d * t36 * t126;
    A0[1][6] = t22 * (t24 + t41 - t127 + t129) + Y_dot_d * t36 * t159;
    A0[1][7] = t22 * (t41 + t56 - t129 + t131) + Y_dot_d * t36 * t160;
    A0[1][8] = t22 * (t56 + t75 - t131 + t134) + Y_dot_d * t36 * t161;
    A0[1][9] = t22 * (t73 + t75 - t133 - t134) + Y_dot_d * t36 * t135;
    A0[1][10] = t22 * (t137 + t141) - Y_dot_d * t36 * t136;
    A0[1][11] = -t22 * (t137 - t39 * t101 * t116 * (1.0 / 2.0)) + Y_dot_d * t36 * t164;
    A0[1][12] = -t22 * (t39 * t101 * t116 * (1.0 / 2.0) - t54 * t103 * t119 * (1.0 / 2.0)) + Y_dot_d * t36 * t166;
    A0[1][13] = -t22 * (t54 * t103 * t119 * (1.0 / 2.0) - t71 * t106 * t124 * (1.0 / 2.0)) + Y_dot_d * t36 * t168;
    A0[1][14] = -t22 * (t141 + t71 * t106 * t124 * (1.0 / 2.0)) + Y_dot_d * t36 * t142;
    A0[2][0] = t22 * (t146 + t156) - Z_dot_d * t36 * t110;
    A0[2][1] = -t22 * (t146 - t38 * t39 * t149 * (1.0 / 2.0)) + Z_dot_d * t36 * t147;
    A0[2][2] = -t22 * (t38 * t39 * t149 * (1.0 / 2.0) - t53 * t54 * t152 * (1.0 / 2.0)) + Z_dot_d * t36 * t150;
    A0[2][3] = -t22 * (t53 * t54 * t152 * (1.0 / 2.0) - t70 * t71 * t157 * (1.0 / 2.0)) + Z_dot_d * t36 * t154;
    A0[2][4] = -t22 * (t156 + t70 * t71 * t157 * (1.0 / 2.0)) + Z_dot_d * t36 * t125;
    A0[2][5] = t22 * (t158 + t162) - Z_dot_d * t36 * t126;
    A0[2][6] = -t22 * (t158 - t39 * t87 * t149 * (1.0 / 2.0)) + Z_dot_d * t36 * t159;
    A0[2][7] = -t22 * (t39 * t87 * t149 * (1.0 / 2.0) - t54 * t89 * t152 * (1.0 / 2.0)) + Z_dot_d * t36 * t160;
    A0[2][8] = -t22 * (t54 * t89 * t152 * (1.0 / 2.0) - t71 * t92 * t157 * (1.0 / 2.0)) + Z_dot_d * t36 * t161;
    A0[2][9] = -t22 * (t162 + t71 * t92 * t157 * (1.0 / 2.0)) + Z_dot_d * t36 * t135;
    A0[2][10] = t22 * (t24 + t73 + t163 + t169) - Z_dot_d * t36 * t136;
    A0[2][11] = t22 * (t24 + t41 - t163 + t165) + Z_dot_d * t36 * t164;
    A0[2][12] = t22 * (t41 + t56 - t165 + t167) + Z_dot_d * t36 * t166;
    A0[2][13] = t22 * (t56 + t75 - t167 + t170) + Z_dot_d * t36 * t168;
    A0[2][14] = t22 * (t73 + t75 - t169 - t170) + Z_dot_d * t36 * t142;
}

void SurfCentroid6_f(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                     const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroid6_df(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                      const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t28, t18, t19, t79, t20, t21, t22,
        t23, t24, t25, t26, t27, t29, t30, t31, t32, t33, t34, t35, t36, t37, t45, t38, t39, t40, t41, t42, t43, t44,
        t46, t47, t48, t49, t50, t51, t52, t60, t53, t54, t55, t56, t57, t58, t59, t61, t62, t63, t64, t65, t66, t67,
        t75, t68, t69, t70, t71, t72, t73, t74, t76, t77, t78, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90,
        t91, t92, t93, t94, t95, t96, t99, t97, t108, t98, t100, t101, t103, t102, t105, t104, t107, t106, t109, t110,
        t111, t112, t115, t113, t124, t114, t116, t117, t119, t118, t121, t120, t123, t122, t125, t126, t127, t128,
        t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143, t144, t145, t146,
        t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160, t161, t162, t163, t164,
        t165, t166, t167, t168, t169, t170, t171, t172, t173, t174, t175, t176, t177, t178, t179, t180, t181, t182,
        t183, t184, t185, t186, t187, t188, t189, t190, t191, t192, t193, t194, t195, t196, t197, t198, t199, t200,
        t201;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[1 - 1] - x[6 - 1];
    t6 = y[1 - 1] - y[6 - 1];
    t7 = z[1 - 1] - z[6 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10 + rsvsmath_automatic_eps_centre2;
    t12 = x[1 - 1] * 2.0;
    t13 = x[1 - 1] * (1.0 / 2.0);
    t14 = t5 * t5;
    t15 = t6 * t6;
    t16 = t7 * t7;
    t17 = t14 + t15 + t16 + rsvsmath_automatic_eps_centre2;
    t28 = x[2 - 1] * 2.0;
    t18 = t12 - t28;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t79 = x[6 - 1] * 2.0;
    t20 = t12 - t79;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t17);
    t22 = 1.0 / totD;
    t23 = sqrt(t11);
    t24 = t23 * (1.0 / 2.0);
    t25 = x[2 - 1] - x[3 - 1];
    t26 = y[2 - 1] - y[3 - 1];
    t27 = z[2 - 1] - z[3 - 1];
    t29 = x[2 - 1] * (1.0 / 2.0);
    t30 = t13 + t29;
    t31 = t18 * t19 * t30 * (1.0 / 2.0);
    t32 = t25 * t25;
    t33 = t26 * t26;
    t34 = t27 * t27;
    t35 = t32 + t33 + t34 + rsvsmath_automatic_eps_centre2;
    t36 = 1.0 / (totD * totD);
    t37 = t18 * t19 * (1.0 / 2.0);
    t45 = x[3 - 1] * 2.0;
    t38 = t28 - t45;
    t39 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t35);
    t40 = sqrt(t35);
    t41 = t40 * (1.0 / 2.0);
    t42 = x[3 - 1] - x[4 - 1];
    t43 = y[3 - 1] - y[4 - 1];
    t44 = z[3 - 1] - z[4 - 1];
    t46 = x[3 - 1] * (1.0 / 2.0);
    t47 = t29 + t46;
    t48 = t38 * t39 * t47 * (1.0 / 2.0);
    t49 = t42 * t42;
    t50 = t43 * t43;
    t51 = t44 * t44;
    t52 = t49 + t50 + t51 + rsvsmath_automatic_eps_centre2;
    t60 = x[4 - 1] * 2.0;
    t53 = t45 - t60;
    t54 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t52);
    t55 = sqrt(t52);
    t56 = t55 * (1.0 / 2.0);
    t57 = x[4 - 1] - x[5 - 1];
    t58 = y[4 - 1] - y[5 - 1];
    t59 = z[4 - 1] - z[5 - 1];
    t61 = x[4 - 1] * (1.0 / 2.0);
    t62 = t46 + t61;
    t63 = t53 * t54 * t62 * (1.0 / 2.0);
    t64 = t57 * t57;
    t65 = t58 * t58;
    t66 = t59 * t59;
    t67 = t64 + t65 + t66 + rsvsmath_automatic_eps_centre2;
    t75 = x[5 - 1] * 2.0;
    t68 = t60 - t75;
    t69 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t67);
    t70 = sqrt(t67);
    t71 = t70 * (1.0 / 2.0);
    t72 = x[5 - 1] - x[6 - 1];
    t73 = y[5 - 1] - y[6 - 1];
    t74 = z[5 - 1] - z[6 - 1];
    t76 = x[5 - 1] * (1.0 / 2.0);
    t77 = t61 + t76;
    t78 = t68 * t69 * t77 * (1.0 / 2.0);
    t80 = x[6 - 1] * (1.0 / 2.0);
    t81 = t72 * t72;
    t82 = t73 * t73;
    t83 = t74 * t74;
    t84 = t81 + t82 + t83 + rsvsmath_automatic_eps_centre2;
    t85 = t75 - t79;
    t86 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t84);
    t87 = sqrt(t17);
    t88 = t87 * (1.0 / 2.0);
    t89 = sqrt(t84);
    t90 = t89 * (1.0 / 2.0);
    t91 = t13 + t80;
    t92 = t20 * t21 * t91 * (1.0 / 2.0);
    t93 = t76 + t80;
    t94 = t85 * t86 * t93 * (1.0 / 2.0);
    t95 = t20 * t21 * (1.0 / 2.0);
    t96 = y[1 - 1] * 2.0;
    t99 = y[2 - 1] * 2.0;
    t97 = t96 - t99;
    t108 = y[6 - 1] * 2.0;
    t98 = t96 - t108;
    t100 = t19 * t30 * t97 * (1.0 / 2.0);
    t101 = t19 * t97 * (1.0 / 2.0);
    t103 = y[3 - 1] * 2.0;
    t102 = t99 - t103;
    t105 = y[4 - 1] * 2.0;
    t104 = t103 - t105;
    t107 = y[5 - 1] * 2.0;
    t106 = t105 - t107;
    t109 = t107 - t108;
    t110 = t21 * t91 * t98 * (1.0 / 2.0);
    t111 = t21 * t98 * (1.0 / 2.0);
    t112 = z[1 - 1] * 2.0;
    t115 = z[2 - 1] * 2.0;
    t113 = t112 - t115;
    t124 = z[6 - 1] * 2.0;
    t114 = t112 - t124;
    t116 = t19 * t30 * t113 * (1.0 / 2.0);
    t117 = t19 * t113 * (1.0 / 2.0);
    t119 = z[3 - 1] * 2.0;
    t118 = t115 - t119;
    t121 = z[4 - 1] * 2.0;
    t120 = t119 - t121;
    t123 = z[5 - 1] * 2.0;
    t122 = t121 - t123;
    t125 = t123 - t124;
    t126 = t21 * t91 * t114 * (1.0 / 2.0);
    t127 = t21 * t114 * (1.0 / 2.0);
    t128 = y[1 - 1] * (1.0 / 2.0);
    t129 = t37 + t95;
    t130 = y[2 - 1] * (1.0 / 2.0);
    t131 = t128 + t130;
    t132 = t18 * t19 * t131 * (1.0 / 2.0);
    t133 = t38 * t39 * (1.0 / 2.0);
    t134 = y[3 - 1] * (1.0 / 2.0);
    t135 = t130 + t134;
    t136 = t53 * t54 * (1.0 / 2.0);
    t137 = y[4 - 1] * (1.0 / 2.0);
    t138 = t134 + t137;
    t139 = t68 * t69 * (1.0 / 2.0);
    t140 = y[5 - 1] * (1.0 / 2.0);
    t141 = t137 + t140;
    t142 = y[6 - 1] * (1.0 / 2.0);
    t143 = t85 * t86 * (1.0 / 2.0);
    t144 = t128 + t142;
    t145 = t20 * t21 * t144 * (1.0 / 2.0);
    t146 = t140 + t142;
    t147 = t95 + t143;
    t148 = t101 + t111;
    t149 = t19 * t97 * t131 * (1.0 / 2.0);
    t150 = t39 * t102 * (1.0 / 2.0);
    t151 = t39 * t102 * t135 * (1.0 / 2.0);
    t152 = t54 * t104 * (1.0 / 2.0);
    t153 = t54 * t104 * t138 * (1.0 / 2.0);
    t154 = t69 * t106 * (1.0 / 2.0);
    t155 = t69 * t106 * t141 * (1.0 / 2.0);
    t156 = t86 * t109 * (1.0 / 2.0);
    t157 = t21 * t98 * t144 * (1.0 / 2.0);
    t158 = t86 * t109 * t146 * (1.0 / 2.0);
    t159 = t111 + t156;
    t160 = t117 + t127;
    t161 = t19 * t113 * t131 * (1.0 / 2.0);
    t162 = t39 * t118 * (1.0 / 2.0);
    t163 = t54 * t120 * (1.0 / 2.0);
    t164 = t69 * t122 * (1.0 / 2.0);
    t165 = t86 * t125 * (1.0 / 2.0);
    t166 = t21 * t114 * t144 * (1.0 / 2.0);
    t167 = t127 + t165;
    t168 = z[1 - 1] * (1.0 / 2.0);
    t169 = z[2 - 1] * (1.0 / 2.0);
    t170 = t168 + t169;
    t171 = t18 * t19 * t170 * (1.0 / 2.0);
    t172 = t37 - t133;
    t173 = z[3 - 1] * (1.0 / 2.0);
    t174 = t169 + t173;
    t175 = t133 - t136;
    t176 = z[4 - 1] * (1.0 / 2.0);
    t177 = t173 + t176;
    t178 = t136 - t139;
    t179 = z[5 - 1] * (1.0 / 2.0);
    t180 = t176 + t179;
    t181 = z[6 - 1] * (1.0 / 2.0);
    t182 = t139 - t143;
    t183 = t168 + t181;
    t184 = t20 * t21 * t183 * (1.0 / 2.0);
    t185 = t179 + t181;
    t186 = t19 * t97 * t170 * (1.0 / 2.0);
    t187 = t101 - t150;
    t188 = t150 - t152;
    t189 = t152 - t154;
    t190 = t154 - t156;
    t191 = t21 * t98 * t183 * (1.0 / 2.0);
    t192 = t19 * t113 * t170 * (1.0 / 2.0);
    t193 = t117 - t162;
    t194 = t39 * t118 * t174 * (1.0 / 2.0);
    t195 = t162 - t163;
    t196 = t54 * t120 * t177 * (1.0 / 2.0);
    t197 = t163 - t164;
    t198 = t69 * t122 * t180 * (1.0 / 2.0);
    t199 = t164 - t165;
    t200 = t21 * t114 * t183 * (1.0 / 2.0);
    t201 = t86 * t125 * t185 * (1.0 / 2.0);
    A0[0][0] = t22 * (t24 + t31 + t88 + t92) - X_dot_d * t36 * t129;
    A0[0][1] = t22 * (t24 - t31 + t41 + t48) + X_dot_d * t36 * (t37 - t38 * t39 * (1.0 / 2.0));
    A0[0][2] = t22 * (t41 - t48 + t56 + t63) + X_dot_d * t36 * (t133 - t53 * t54 * (1.0 / 2.0));
    A0[0][3] = t22 * (t56 - t63 + t71 + t78) + X_dot_d * t36 * (t136 - t68 * t69 * (1.0 / 2.0));
    A0[0][4] = t22 * (t71 - t78 + t90 + t94) + X_dot_d * t36 * (t139 - t85 * t86 * (1.0 / 2.0));
    A0[0][5] = t22 * (t88 + t90 - t92 - t94) + X_dot_d * t36 * t147;
    A0[0][6] = t22 * (t100 + t110) - X_dot_d * t36 * t148;
    A0[0][7] = -t22 * (t100 - t39 * t47 * t102 * (1.0 / 2.0)) + X_dot_d * t36 * (t101 - t39 * t102 * (1.0 / 2.0));
    A0[0][8] = -t22 * (t39 * t47 * t102 * (1.0 / 2.0) - t54 * t62 * t104 * (1.0 / 2.0)) +
               X_dot_d * t36 * (t150 - t54 * t104 * (1.0 / 2.0));
    A0[0][9] = -t22 * (t54 * t62 * t104 * (1.0 / 2.0) - t69 * t77 * t106 * (1.0 / 2.0)) +
               X_dot_d * t36 * (t152 - t69 * t106 * (1.0 / 2.0));
    A0[0][10] = -t22 * (t69 * t77 * t106 * (1.0 / 2.0) - t86 * t93 * t109 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t154 - t86 * t109 * (1.0 / 2.0));
    A0[0][11] = -t22 * (t110 + t86 * t93 * t109 * (1.0 / 2.0)) + X_dot_d * t36 * t159;
    A0[0][12] = t22 * (t116 + t126) - X_dot_d * t36 * t160;
    A0[0][13] = -t22 * (t116 - t39 * t47 * t118 * (1.0 / 2.0)) + X_dot_d * t36 * (t117 - t39 * t118 * (1.0 / 2.0));
    A0[0][14] = -t22 * (t39 * t47 * t118 * (1.0 / 2.0) - t54 * t62 * t120 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t162 - t54 * t120 * (1.0 / 2.0));
    A0[0][15] = -t22 * (t54 * t62 * t120 * (1.0 / 2.0) - t69 * t77 * t122 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t163 - t69 * t122 * (1.0 / 2.0));
    A0[0][16] = -t22 * (t69 * t77 * t122 * (1.0 / 2.0) - t86 * t93 * t125 * (1.0 / 2.0)) +
                X_dot_d * t36 * (t164 - t86 * t125 * (1.0 / 2.0));
    A0[0][17] = -t22 * (t126 + t86 * t93 * t125 * (1.0 / 2.0)) + X_dot_d * t36 * t167;
    A0[1][0] = t22 * (t132 + t145) - Y_dot_d * t36 * t129;
    A0[1][1] = -t22 * (t132 - t38 * t39 * t135 * (1.0 / 2.0)) + Y_dot_d * t36 * t172;
    A0[1][2] = -t22 * (t38 * t39 * t135 * (1.0 / 2.0) - t53 * t54 * t138 * (1.0 / 2.0)) + Y_dot_d * t36 * t175;
    A0[1][3] = -t22 * (t53 * t54 * t138 * (1.0 / 2.0) - t68 * t69 * t141 * (1.0 / 2.0)) + Y_dot_d * t36 * t178;
    A0[1][4] = -t22 * (t68 * t69 * t141 * (1.0 / 2.0) - t85 * t86 * t146 * (1.0 / 2.0)) + Y_dot_d * t36 * t182;
    A0[1][5] = -t22 * (t145 + t85 * t86 * t146 * (1.0 / 2.0)) + Y_dot_d * t36 * t147;
    A0[1][6] = t22 * (t24 + t88 + t149 + t157) - Y_dot_d * t36 * t148;
    A0[1][7] = t22 * (t24 + t41 - t149 + t151) + Y_dot_d * t36 * t187;
    A0[1][8] = t22 * (t41 + t56 - t151 + t153) + Y_dot_d * t36 * t188;
    A0[1][9] = t22 * (t56 + t71 - t153 + t155) + Y_dot_d * t36 * t189;
    A0[1][10] = t22 * (t71 + t90 - t155 + t158) + Y_dot_d * t36 * t190;
    A0[1][11] = t22 * (t88 + t90 - t157 - t158) + Y_dot_d * t36 * t159;
    A0[1][12] = t22 * (t161 + t166) - Y_dot_d * t36 * t160;
    A0[1][13] = -t22 * (t161 - t39 * t118 * t135 * (1.0 / 2.0)) + Y_dot_d * t36 * t193;
    A0[1][14] = -t22 * (t39 * t118 * t135 * (1.0 / 2.0) - t54 * t120 * t138 * (1.0 / 2.0)) + Y_dot_d * t36 * t195;
    A0[1][15] = -t22 * (t54 * t120 * t138 * (1.0 / 2.0) - t69 * t122 * t141 * (1.0 / 2.0)) + Y_dot_d * t36 * t197;
    A0[1][16] = -t22 * (t69 * t122 * t141 * (1.0 / 2.0) - t86 * t125 * t146 * (1.0 / 2.0)) + Y_dot_d * t36 * t199;
    A0[1][17] = -t22 * (t166 + t86 * t125 * t146 * (1.0 / 2.0)) + Y_dot_d * t36 * t167;
    A0[2][0] = t22 * (t171 + t184) - Z_dot_d * t36 * t129;
    A0[2][1] = -t22 * (t171 - t38 * t39 * t174 * (1.0 / 2.0)) + Z_dot_d * t36 * t172;
    A0[2][2] = -t22 * (t38 * t39 * t174 * (1.0 / 2.0) - t53 * t54 * t177 * (1.0 / 2.0)) + Z_dot_d * t36 * t175;
    A0[2][3] = -t22 * (t53 * t54 * t177 * (1.0 / 2.0) - t68 * t69 * t180 * (1.0 / 2.0)) + Z_dot_d * t36 * t178;
    A0[2][4] = -t22 * (t68 * t69 * t180 * (1.0 / 2.0) - t85 * t86 * t185 * (1.0 / 2.0)) + Z_dot_d * t36 * t182;
    A0[2][5] = -t22 * (t184 + t85 * t86 * t185 * (1.0 / 2.0)) + Z_dot_d * t36 * t147;
    A0[2][6] = t22 * (t186 + t191) - Z_dot_d * t36 * t148;
    A0[2][7] = -t22 * (t186 - t39 * t102 * t174 * (1.0 / 2.0)) + Z_dot_d * t36 * t187;
    A0[2][8] = -t22 * (t39 * t102 * t174 * (1.0 / 2.0) - t54 * t104 * t177 * (1.0 / 2.0)) + Z_dot_d * t36 * t188;
    A0[2][9] = -t22 * (t54 * t104 * t177 * (1.0 / 2.0) - t69 * t106 * t180 * (1.0 / 2.0)) + Z_dot_d * t36 * t189;
    A0[2][10] = -t22 * (t69 * t106 * t180 * (1.0 / 2.0) - t86 * t109 * t185 * (1.0 / 2.0)) + Z_dot_d * t36 * t190;
    A0[2][11] = -t22 * (t191 + t86 * t109 * t185 * (1.0 / 2.0)) + Z_dot_d * t36 * t159;
    A0[2][12] = t22 * (t24 + t88 + t192 + t200) - Z_dot_d * t36 * t160;
    A0[2][13] = t22 * (t24 + t41 - t192 + t194) + Z_dot_d * t36 * t193;
    A0[2][14] = t22 * (t41 + t56 - t194 + t196) + Z_dot_d * t36 * t195;
    A0[2][15] = t22 * (t56 + t71 - t196 + t198) + Z_dot_d * t36 * t197;
    A0[2][16] = t22 * (t71 + t90 - t198 + t201) + Z_dot_d * t36 * t199;
    A0[2][17] = t22 * (t88 + t90 - t200 - t201) + Z_dot_d * t36 * t167;
}

void SurfCentroidConnec_f(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                          const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroidConnec_df(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                           const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t28, t20, t21, t22, t23,
        t24, t25, t26, t27, t29, t30, t31, t32, t33, t34, t35, t36, t37, t64, t38, t39, t40, t41, t42, t43, t45, t44,
        t46, t47, t48, t49, t75, t50, t51, t52, t54, t53, t55, t56, t82, t57, t58, t59, t85, t60, t61, t62, t63, t89,
        t65, t66, t67, t68, t69, t70, t92, t71, t72, t73, t74, t76, t77, t96, t78, t79, t97, t80, t81, t99, t83, t84,
        t86, t87, t88, t90, t91, t93, t94, t95, t98;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[2 - 1] - x[3 - 1];
    t6 = y[2 - 1] - y[3 - 1];
    t7 = z[2 - 1] - z[3 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10 + rsvsmath_automatic_eps_centre2;
    t12 = x[2 - 1] * (1.0 / 2.0);
    t13 = t5 * t5;
    t14 = t6 * t6;
    t15 = t7 * t7;
    t16 = t13 + t14 + t15 + rsvsmath_automatic_eps_centre2;
    t17 = x[1 - 1] * 2.0;
    t18 = x[2 - 1] * 2.0;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t28 = x[3 - 1] * 2.0;
    t20 = t18 - t28;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t16);
    t22 = 1.0 / totD;
    t23 = sqrt(t16);
    t24 = t23 * (1.0 / 2.0);
    t25 = x[3 - 1] - x[4 - 1];
    t26 = y[3 - 1] - y[4 - 1];
    t27 = z[3 - 1] - z[4 - 1];
    t29 = x[3 - 1] * (1.0 / 2.0);
    t30 = t12 + t29;
    t31 = t20 * t21 * t30 * (1.0 / 2.0);
    t32 = t25 * t25;
    t33 = t26 * t26;
    t34 = t27 * t27;
    t35 = t32 + t33 + t34 + rsvsmath_automatic_eps_centre2;
    t36 = 1.0 / (totD * totD);
    t37 = t20 * t21 * (1.0 / 2.0);
    t64 = x[4 - 1] * 2.0;
    t38 = t28 - t64;
    t39 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t35);
    t40 = x[1 - 1] * (1.0 / 2.0);
    t41 = t12 + t40;
    t42 = y[1 - 1] * 2.0;
    t43 = y[2 - 1] * 2.0;
    t45 = y[3 - 1] * 2.0;
    t44 = t43 - t45;
    t46 = t21 * t30 * t44 * (1.0 / 2.0);
    t47 = x[4 - 1] * (1.0 / 2.0);
    t48 = t29 + t47;
    t49 = t21 * t44 * (1.0 / 2.0);
    t75 = y[4 - 1] * 2.0;
    t50 = t45 - t75;
    t51 = z[1 - 1] * 2.0;
    t52 = z[2 - 1] * 2.0;
    t54 = z[3 - 1] * 2.0;
    t53 = t52 - t54;
    t55 = t21 * t30 * t53 * (1.0 / 2.0);
    t56 = t21 * t53 * (1.0 / 2.0);
    t82 = z[4 - 1] * 2.0;
    t57 = t54 - t82;
    t58 = t17 - t18;
    t59 = y[2 - 1] * (1.0 / 2.0);
    t85 = t19 * t58 * (1.0 / 2.0);
    t60 = t37 - t85;
    t61 = y[3 - 1] * (1.0 / 2.0);
    t62 = t59 + t61;
    t63 = t20 * t21 * t62 * (1.0 / 2.0);
    t89 = t38 * t39 * (1.0 / 2.0);
    t65 = t37 - t89;
    t66 = sqrt(t11);
    t67 = t66 * (1.0 / 2.0);
    t68 = t42 - t43;
    t69 = y[1 - 1] * (1.0 / 2.0);
    t70 = t59 + t69;
    t92 = t19 * t68 * (1.0 / 2.0);
    t71 = t49 - t92;
    t72 = sqrt(t35);
    t73 = t72 * (1.0 / 2.0);
    t74 = t21 * t44 * t62 * (1.0 / 2.0);
    t76 = y[4 - 1] * (1.0 / 2.0);
    t77 = t61 + t76;
    t96 = t39 * t50 * (1.0 / 2.0);
    t78 = t49 - t96;
    t79 = t51 - t52;
    t97 = t19 * t79 * (1.0 / 2.0);
    t80 = t56 - t97;
    t81 = t21 * t53 * t62 * (1.0 / 2.0);
    t99 = t39 * t57 * (1.0 / 2.0);
    t83 = t56 - t99;
    t84 = z[2 - 1] * (1.0 / 2.0);
    t86 = z[3 - 1] * (1.0 / 2.0);
    t87 = t84 + t86;
    t88 = t20 * t21 * t87 * (1.0 / 2.0);
    t90 = z[1 - 1] * (1.0 / 2.0);
    t91 = t84 + t90;
    t93 = t21 * t44 * t87 * (1.0 / 2.0);
    t94 = z[4 - 1] * (1.0 / 2.0);
    t95 = t86 + t94;
    t98 = t21 * t53 * t87 * (1.0 / 2.0);
    A0[0][0] = t22 * (t24 + t31 + t67 - t19 * t41 * (t17 - x[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t36 * t60;
    A0[0][1] = t22 * (t24 - t31 + t73 + t38 * t39 * t48 * (1.0 / 2.0)) + X_dot_d * t36 * t65;
    A0[0][2] = t22 * (t46 - t19 * t41 * (t42 - y[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t36 * t71;
    A0[0][3] = -t22 * (t46 - t39 * t48 * t50 * (1.0 / 2.0)) + X_dot_d * t36 * t78;
    A0[0][4] = t22 * (t55 - t19 * t41 * (t51 - z[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t36 * t80;
    A0[0][5] = -t22 * (t55 - t39 * t48 * t57 * (1.0 / 2.0)) + X_dot_d * t36 * t83;
    A0[1][0] = t22 * (t63 - t19 * t58 * t70 * (1.0 / 2.0)) - Y_dot_d * t36 * t60;
    A0[1][1] = -t22 * (t63 - t38 * t39 * t77 * (1.0 / 2.0)) + Y_dot_d * t36 * t65;
    A0[1][2] = t22 * (t24 + t67 + t74 - t19 * t68 * t70 * (1.0 / 2.0)) - Y_dot_d * t36 * t71;
    A0[1][3] = t22 * (t24 + t73 - t74 + t39 * t50 * t77 * (1.0 / 2.0)) + Y_dot_d * t36 * t78;
    A0[1][4] = t22 * (t81 - t19 * t70 * t79 * (1.0 / 2.0)) - Y_dot_d * t36 * t80;
    A0[1][5] = -t22 * (t81 - t39 * t57 * t77 * (1.0 / 2.0)) + Y_dot_d * t36 * t83;
    A0[2][0] = t22 * (t88 - t19 * t58 * t91 * (1.0 / 2.0)) - Z_dot_d * t36 * t60;
    A0[2][1] = -t22 * (t88 - t38 * t39 * t95 * (1.0 / 2.0)) + Z_dot_d * t36 * t65;
    A0[2][2] = t22 * (t93 - t19 * t68 * t91 * (1.0 / 2.0)) - Z_dot_d * t36 * t71;
    A0[2][3] = -t22 * (t93 - t39 * t50 * t95 * (1.0 / 2.0)) + Z_dot_d * t36 * t78;
    A0[2][4] = t22 * (t24 + t67 + t98 - t19 * t79 * t91 * (1.0 / 2.0)) - Z_dot_d * t36 * t80;
    A0[2][5] = t22 * (t24 + t73 - t98 + t39 * t57 * t95 * (1.0 / 2.0)) + Z_dot_d * t36 * t83;
}

void SurfCentroidConnec_ddf(const vector<double> &x, const vector<double> &y, const vector<double> &z,
                            const double totD, const double X_dot_d, const double Y_dot_d, const double Z_dot_d,
                            ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t11, t6, t7, t8, t9, t10, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24,
        t31, t25, t26, t27, t28, t29, t38, t30, t42, t32, t33, t34, t35, t36, t37, t39, t40, t41, t74, t43, t44, t45,
        t46, t47, t48, t49, t50, t53, t51, t52, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67,
        t69, t68, t84, t70, t71, t72, t73, t75, t76, t77, t78, t83, t79, t80, t81, t97, t82, t85, t86, t87, t88, t89,
        t90, t91, t92, t93, t94, t95, t96, t98, t99, t100, t101, t102, t103, t105, t104, t106, t137, t107, t108, t112,
        t109, t110, t111, t113, t145, t114, t115, t116, t146, t117, t118, t119, t120, t125, t121, t122, t123, t152,
        t124, t126, t127, t128, t153, t129, t130, t154, t131, t135, t132, t133, t134, t139, t136, t138, t140, t141,
        t194, t142, t143, t144, t147, t148, t204, t149, t150, t157, t151, t155, t156, t158, t159, t160, t161, t162,
        t163, t164, t165, t166, t167, t168, t181, t169, t170, t171, t172, t254, t173, t174, t175, t176, t177, t178,
        t179, t180, t182, t183, t184, t185, t186, t187, t188, t189, t190, t191, t192, t193, t195, t196, t197, t198,
        t199, t200, t201, t202, t203, t205, t206, t207, t208, t209, t247, t210, t211, t212, t213, t214, t215, t216,
        t217, t218, t219, t220, t253, t221, t222, t223, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233,
        t234, t235, t236, t237, t238, t239, t240, t241, t242, t243, t244, t245, t246, t248, t249, t250, t251, t252,
        t255, t256, t257, t258, t259, t260, t261, t262;
    t2 = x[2 - 1] - x[3 - 1];
    t3 = y[2 - 1] - y[3 - 1];
    t4 = z[2 - 1] - z[3 - 1];
    t5 = y[2 - 1] * 2.0;
    t11 = y[3 - 1] * 2.0;
    t6 = t5 - t11;
    t7 = t2 * t2;
    t8 = t3 * t3;
    t9 = t4 * t4;
    t10 = t7 + t8 + t9 + rsvsmath_automatic_eps_centre2;
    t12 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t10);
    t13 = x[3 - 1] - x[4 - 1];
    t14 = y[3 - 1] - y[4 - 1];
    t15 = z[3 - 1] - z[4 - 1];
    t16 = x[1 - 1] - x[2 - 1];
    t17 = y[1 - 1] - y[2 - 1];
    t18 = z[1 - 1] - z[2 - 1];
    t19 = x[2 - 1] * 2.0;
    t20 = x[2 - 1] * (1.0 / 2.0);
    t21 = t16 * t16;
    t22 = t17 * t17;
    t23 = t18 * t18;
    t24 = t21 + t22 + t23 + rsvsmath_automatic_eps_centre2;
    t31 = x[3 - 1] * 2.0;
    t25 = t19 - t31;
    t26 = x[3 - 1] * (1.0 / 2.0);
    t27 = t20 + t26;
    t28 = 1.0 / (totD * totD);
    t29 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t24);
    t38 = x[1 - 1] * 2.0;
    t30 = t19 - t38;
    t42 = y[4 - 1] * 2.0;
    t32 = t11 - t42;
    t33 = t13 * t13;
    t34 = t14 * t14;
    t35 = t15 * t15;
    t36 = t33 + t34 + t35 + rsvsmath_automatic_eps_centre2;
    t37 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t36);
    t39 = t29 * t30 * (1.0 / 2.0);
    t40 = t12 * t25 * (1.0 / 2.0);
    t41 = t6 * t12 * (1.0 / 2.0);
    t74 = t32 * t37 * (1.0 / 2.0);
    t43 = t41 - t74;
    t44 = t39 + t40;
    t45 = 1.0 / pow(t10, 3.0 / 2.0);
    t46 = 1.0 / totD;
    t47 = x[1 - 1] * (1.0 / 2.0);
    t48 = t20 + t47;
    t49 = z[1 - 1] * 2.0;
    t50 = z[2 - 1] * 2.0;
    t53 = z[3 - 1] * 2.0;
    t51 = t50 - t53;
    t52 = t49 - t50;
    t54 = sqrt(t24);
    t55 = t54 * (1.0 / 2.0);
    t56 = sqrt(t10);
    t57 = t56 * (1.0 / 2.0);
    t58 = t12 * t25 * t27 * (1.0 / 2.0);
    t59 = t29 * t30 * t48 * (1.0 / 2.0);
    t60 = t55 + t57 + t58 + t59;
    t61 = 1.0 / pow(t24, 3.0 / 2.0);
    t62 = 1.0 / (totD * totD * totD);
    t63 = t12 * t51 * (1.0 / 2.0);
    t64 = t12 * t51 * (1.0 / 4.0);
    t65 = t12 * t27 * t51 * (1.0 / 2.0);
    t66 = x[4 - 1] * (1.0 / 2.0);
    t67 = t26 + t66;
    t69 = z[4 - 1] * 2.0;
    t68 = t53 - t69;
    t84 = t37 * t68 * (1.0 / 2.0);
    t70 = t63 - t84;
    t71 = y[2 - 1] * (1.0 / 2.0);
    t72 = y[3 - 1] * (1.0 / 2.0);
    t73 = t71 + t72;
    t75 = y[1 - 1] * (1.0 / 2.0);
    t76 = t71 + t75;
    t77 = t29 * t30 * t76 * (1.0 / 2.0);
    t78 = t12 * t25 * t73 * (1.0 / 2.0);
    t83 = t29 * t52 * (1.0 / 2.0);
    t79 = t63 - t83;
    t80 = t77 + t78;
    t81 = t25 * t45 * t51 * (1.0 / 4.0);
    t97 = t30 * t52 * t61 * (1.0 / 4.0);
    t82 = t81 - t97;
    t85 = t12 * t51 * t73 * (1.0 / 2.0);
    t86 = y[4 - 1] * (1.0 / 2.0);
    t87 = t72 + t86;
    t88 = z[2 - 1] * (1.0 / 2.0);
    t89 = z[3 - 1] * (1.0 / 2.0);
    t90 = t88 + t89;
    t91 = t12 * t25 * (1.0 / 4.0);
    t92 = z[1 - 1] * (1.0 / 2.0);
    t93 = t88 + t92;
    t94 = t29 * t30 * t93 * (1.0 / 2.0);
    t95 = t12 * t25 * t90 * (1.0 / 2.0);
    t96 = t94 + t95;
    t98 = sqrt(t36);
    t99 = t98 * (1.0 / 2.0);
    t100 = t12 * t51 * t90 * (1.0 / 2.0);
    t101 = z[4 - 1] * (1.0 / 2.0);
    t102 = t89 + t101;
    t103 = t6 * t12 * (1.0 / 4.0);
    t105 = x[4 - 1] * 2.0;
    t104 = t31 - t105;
    t106 = t6 * t12 * t27 * (1.0 / 2.0);
    t137 = t32 * t37 * t67 * (1.0 / 2.0);
    t107 = t106 - t137;
    t108 = 1.0 / pow(t36, 3.0 / 2.0);
    t112 = t37 * t104 * (1.0 / 2.0);
    t109 = t40 - t112;
    t110 = t37 * t67 * t104 * (1.0 / 2.0);
    t111 = t57 - t58 + t99 + t110;
    t113 = t25 * t27 * t45 * t51 * (1.0 / 4.0);
    t145 = t37 * t67 * t68 * (1.0 / 2.0);
    t114 = t65 - t145;
    t115 = t6 * t25 * t45 * t73 * (1.0 / 4.0);
    t116 = t32 * t37 * t87 * (1.0 / 2.0);
    t146 = t6 * t12 * t73 * (1.0 / 2.0);
    t117 = t57 + t99 + t116 - t146;
    t118 = t6 * t25 * t45 * (1.0 / 4.0);
    t119 = t32 * t104 * t108 * (1.0 / 4.0);
    t120 = t118 + t119;
    t125 = t37 * t87 * t104 * (1.0 / 2.0);
    t121 = t78 - t125;
    t122 = t25 * t45 * t46 * t51 * t73 * (1.0 / 4.0);
    t123 = t25 * t45 * t51 * t73 * (1.0 / 4.0);
    t152 = t37 * t68 * t87 * (1.0 / 2.0);
    t124 = t85 - t152;
    t126 = t68 * t104 * t108 * (1.0 / 4.0);
    t127 = t81 + t126;
    t128 = t6 * t12 * t90 * (1.0 / 2.0);
    t153 = t32 * t37 * t102 * (1.0 / 2.0);
    t129 = t128 - t153;
    t130 = t25 * t45 * t51 * t90 * (1.0 / 4.0);
    t154 = t29 * t52 * t93 * (1.0 / 2.0);
    t131 = t55 + t57 + t100 - t154;
    t135 = t37 * t102 * t104 * (1.0 / 2.0);
    t132 = t95 - t135;
    t133 = t37 * t68 * t102 * (1.0 / 2.0);
    t134 = t57 + t99 - t100 + t133;
    t139 = y[1 - 1] * 2.0;
    t136 = t5 - t139;
    t138 = t6 * t6;
    t140 = t29 * t136 * (1.0 / 2.0);
    t141 = t41 + t140;
    t194 = t29 * t48 * t52 * (1.0 / 2.0);
    t142 = t65 - t194;
    t143 = t29 * t48 * t136 * (1.0 / 2.0);
    t144 = t106 + t143;
    t147 = t29 * t76 * (t5 - t139) * (1.0 / 2.0);
    t148 = t55 + t57 + t146 + t147;
    t204 = t29 * t52 * t76 * (1.0 / 2.0);
    t149 = t85 - t204;
    t150 = t6 * t45 * t51 * (1.0 / 4.0);
    t157 = t52 * t61 * t136 * (1.0 / 4.0);
    t151 = t150 - t157;
    t155 = t29 * t93 * t136 * (1.0 / 2.0);
    t156 = t128 + t155;
    t158 = t6 * t25 * t27 * t45 * (1.0 / 4.0);
    t159 = t29 * t48 * (t19 - t38) * (1.0 / 2.0);
    t160 = t55 + t57 + t58 + t159;
    t161 = t32 * t67 * t104 * t108 * (1.0 / 4.0);
    t162 = t103 + t158 + t161 - t32 * t37 * (1.0 / 4.0);
    t163 = t28 * t43 * t111;
    t164 = X_dot_d * t28 * t120;
    t165 = X_dot_d * t43 * t62 * t109 * 2.0;
    t166 = t163 + t164 + t165 - t46 * t162 - t28 * t107 * t109;
    t167 = t12 * t27;
    t168 = t167 - t27 * t45 * t138 * (1.0 / 4.0);
    t181 = t45 * t138 * (1.0 / 4.0);
    t169 = X_dot_d * t28 * (t12 - t181);
    t170 = t91 + t115;
    t171 = t46 * t170;
    t172 = t32 * t87 * t104 * t108 * (1.0 / 4.0);
    t254 = t37 * t104 * (1.0 / 4.0);
    t173 = t91 + t115 + t172 - t254;
    t174 = t28 * t109 * t117;
    t175 = Y_dot_d * t28 * t120;
    t176 = Y_dot_d * t43 * t62 * t109 * 2.0;
    t177 = t174 + t175 + t176 - t46 * t173 - t28 * t43 * t121;
    t178 = t12 * t73;
    t179 = t178 - t45 * t73 * t138 * (1.0 / 4.0);
    t180 = t28 * t43 * t148;
    t182 = t28 * t129 * (t39 + t40);
    t183 = t6 * t25 * t45 * t46 * t90 * (1.0 / 4.0);
    t184 = t6 * t25 * t45 * t90 * (1.0 / 4.0);
    t185 = t32 * t102 * t104 * t108 * (1.0 / 4.0);
    t186 = t184 + t185;
    t187 = Z_dot_d * t28 * t120;
    t188 = Z_dot_d * t43 * t62 * t109 * 2.0;
    t189 = t187 + t188 - t46 * t186 - t28 * t43 * t132 - t28 * t109 * t129;
    t190 = t12 * t90;
    t191 = t190 - t45 * t90 * t138 * (1.0 / 4.0);
    t192 = t28 * t129 * (t41 + t140);
    t193 = t30 * t48 * t52 * t61 * (1.0 / 4.0);
    t195 = X_dot_d * t28 * t82;
    t196 = t64 + t113;
    t197 = t46 * t196;
    t198 = t6 * t27 * t45 * t51 * (1.0 / 4.0);
    t199 = t198 - t48 * t52 * t61 * t136 * (1.0 / 4.0);
    t200 = X_dot_d * t28 * t151;
    t201 = X_dot_d * t62 * (t41 + t140) * (t63 - t83) * 2.0;
    t202 = t200 + t201 - t46 * t199 - t28 * t79 * t144 - t28 * t141 * t142;
    t203 = t123 - t30 * t52 * t61 * t76 * (1.0 / 4.0);
    t205 = Y_dot_d * t28 * t82;
    t206 = Y_dot_d * t62 * (t39 + t40) * (t63 - t83) * 2.0;
    t207 = t205 + t206 - t46 * t203 - t28 * t79 * t80 - t28 * t44 * t149;
    t208 = t28 * t121 * (t63 - t83);
    t209 = t52 * t61 * t76 * t136 * (1.0 / 4.0);
    t247 = t6 * t45 * t51 * t73 * (1.0 / 4.0);
    t210 = t46 * (t64 + t209 - t247 - t29 * t52 * (1.0 / 4.0));
    t211 = Y_dot_d * t28 * t151;
    t212 = Y_dot_d * t62 * (t41 + t140) * (t63 - t83) * 2.0;
    t213 = t210 + t211 + t212 - t28 * t79 * t148 - t28 * t141 * t149;
    t214 = t29 * t30 * (1.0 / 4.0);
    t215 = t30 * t52 * t61 * t93 * (1.0 / 4.0);
    t216 = Z_dot_d * t28 * t82;
    t217 = Z_dot_d * t62 * (t39 + t40) * (t63 - t83) * 2.0;
    t218 = t91 - t130;
    t219 = t28 * t109 * t131;
    t220 = t28 * t132 * (t63 - t83);
    t253 = Z_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    t221 = t219 + t220 - t253 - t46 * t218 - Z_dot_d * t62 * t79 * t109 * 2.0;
    t222 = t29 * t136 * (1.0 / 4.0);
    t223 = t52 * t61 * t93 * t136 * (1.0 / 4.0);
    t224 = t6 * t45 * t51 * t90 * (1.0 / 4.0);
    t225 = Z_dot_d * t28 * t151;
    t226 = Z_dot_d * t62 * (t41 + t140) * (t63 - t83) * 2.0;
    t227 = t28 * t70 * t160;
    t228 = t28 * t114 * (t39 + t40);
    t229 = t67 * t68 * t104 * t108 * (1.0 / 4.0);
    t230 = t64 + t113 + t229 - t37 * t68 * (1.0 / 4.0);
    t231 = t28 * t70 * t111;
    t232 = X_dot_d * t28 * t127;
    t233 = X_dot_d * t62 * t70 * t109 * 2.0;
    t234 = t231 + t232 + t233 - t46 * t230 - t28 * t109 * t114;
    t235 = t28 * t70 * (t106 + t143);
    t236 = t28 * t114 * (t41 + t140);
    t237 = t6 * t27 * t45 * t46 * t51 * (1.0 / 4.0);
    t238 = t235 + t236 + t237 - X_dot_d * t62 * t70 * t141 * 2.0 - X_dot_d * t6 * t28 * t45 * t51 * (1.0 / 4.0);
    t239 = t28 * t70 * (t77 + t78);
    t240 = t28 * t124 * (t39 + t40);
    t241 = t122 + t239 + t240 - Y_dot_d * t44 * t62 * t70 * 2.0 - Y_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    t242 = t68 * t87 * t104 * t108 * (1.0 / 4.0);
    t243 = t123 + t242;
    t244 = Y_dot_d * t28 * t127;
    t245 = Y_dot_d * t62 * t70 * t109 * 2.0;
    t246 = t244 + t245 - t46 * t243 - t28 * t70 * t121 - t28 * t109 * t124;
    t248 = t28 * t70 * t148;
    t249 = t28 * t124 * (t41 + t140);
    t250 = t91 + t130;
    t251 = t46 * t250;
    t252 = t28 * t70 * (t94 + t95);
    t255 = t68 * t102 * t104 * t108 * (1.0 / 4.0);
    t256 = t28 * t109 * t134;
    t257 = Z_dot_d * t28 * t127;
    t258 = Z_dot_d * t62 * t70 * t109 * 2.0;
    t259 = t103 + t224;
    t260 = t46 * t259;
    t261 = t28 * t70 * (t128 + t155);
    t262 = t260 + t261 - t28 * t134 * t141 - Z_dot_d * t62 * t70 * t141 * 2.0 -
           Z_dot_d * t6 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[0][3] = -t46 * (t103 - t6 * t25 * t27 * t45 * (1.0 / 4.0)) + t28 * t43 * t60 + t28 * t44 * t107 -
               X_dot_d * t43 * t44 * t62 * 2.0 - X_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[0][4] = t195 +
               t46 * (t64 + t193 - t29 * (t49 - z[2 - 1] * 2.0) * (1.0 / 4.0) - t25 * t27 * t45 * t51 * (1.0 / 4.0)) -
               t28 * t60 * t79 - t28 * t44 * t142 + X_dot_d * t62 * t79 * (t39 + t40) * 2.0;
    A0[0][5] = t227 + t228 - t46 * (t64 - t25 * t27 * t45 * t51 * (1.0 / 4.0)) - X_dot_d * t44 * t62 * t70 * 2.0 -
               X_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[0][9] = t171 + t28 * t43 * t80 - t28 * t44 * t117 - Y_dot_d * t43 * t44 * t62 * 2.0 -
               Y_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[0][10] = t207;
    A0[0][11] = t241;
    A0[0][15] =
        t182 + t183 + t28 * t43 * t96 - Z_dot_d * t43 * t44 * t62 * 2.0 - Z_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[0][16] = t216 + t217 + t46 * (t91 + t214 + t215 - t25 * t45 * t51 * t90 * (1.0 / 4.0)) - t28 * t44 * t131 -
                t28 * t79 * t96;
    A0[0][17] = t251 + t252 - t28 * t44 * t134 - Z_dot_d * t44 * t62 * t70 * 2.0 -
                Z_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[1][3] = t166;
    A0[1][4] = t197 - t28 * t79 * t111 + t28 * t109 * t142 - X_dot_d * t62 * t79 * t109 * 2.0 -
               X_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[1][5] = t234;
    A0[1][9] = t177;
    A0[1][10] = t122 + t208 + t28 * t109 * t149 - Y_dot_d * t62 * t79 * t109 * 2.0 -
                Y_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[1][11] = t246;
    A0[1][15] = t189;
    A0[1][16] = t221;
    A0[1][17] = t256 + t257 + t258 - t46 * (t91 + t130 + t255 - t37 * t104 * (1.0 / 4.0)) - t28 * t70 * t132;
    A0[2][3] = t169 - t46 * t168 + t28 * t43 * t144 + t28 * t107 * t141 - X_dot_d * t43 * t62 * t141 * 2.0;
    A0[2][4] = t202;
    A0[2][5] = t238;
    A0[2][9] = t180 - t46 * t179 + Y_dot_d * t28 * (t12 - t45 * t138 * (1.0 / 4.0)) - t28 * t117 * t141 -
               Y_dot_d * t43 * t62 * t141 * 2.0;
    A0[2][10] = t213;
    A0[2][11] = t248 + t249 - t46 * (t64 - t6 * t45 * t51 * t73 * (1.0 / 4.0)) - Y_dot_d * t62 * t70 * t141 * 2.0 -
                Y_dot_d * t6 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[2][15] = t192 - t46 * t191 + Z_dot_d * t28 * (t12 - t45 * t138 * (1.0 / 4.0)) + t28 * t43 * t156 -
                Z_dot_d * t43 * t62 * t141 * 2.0;
    A0[2][16] = t225 + t226 + t46 * (t103 + t222 + t223 - t6 * t45 * t51 * t90 * (1.0 / 4.0)) - t28 * t79 * t156 -
                t28 * t131 * t141;
    A0[2][17] = t262;
    A0[3][0] = -t46 * (t103 - t158) + t28 * t107 * (t39 + t40) + t28 * t43 * t160 - X_dot_d * t43 * t44 * t62 * 2.0 -
               X_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[3][1] = t166;
    A0[3][2] =
        t169 - t46 * t168 + t28 * t107 * (t41 + t140) + t28 * t43 * (t106 + t143) - X_dot_d * t43 * t62 * t141 * 2.0;
    A0[3][6] = t171 + t28 * t43 * (t77 + t78) - t28 * t44 * t117 - Y_dot_d * t43 * t44 * t62 * 2.0 -
               Y_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[3][7] = t177;
    A0[3][8] = t180 - t46 * t179 - t28 * t117 * t141 + Y_dot_d * t28 * (t12 - t181) - Y_dot_d * t43 * t62 * t141 * 2.0;
    A0[3][12] = t182 + t183 + t28 * t43 * (t94 + t95) - Z_dot_d * t43 * t44 * t62 * 2.0 -
                Z_dot_d * t6 * t25 * t28 * t45 * (1.0 / 4.0);
    A0[3][13] = t189;
    A0[3][14] =
        t192 - t46 * t191 + t28 * t43 * (t128 + t155) + Z_dot_d * t28 * (t12 - t181) - Z_dot_d * t43 * t62 * t141 * 2.0;
    A0[4][0] = t195 + t46 * (t64 - t113 + t193 - t29 * t52 * (1.0 / 4.0)) - t28 * t44 * t142 - t28 * t79 * t160 +
               X_dot_d * t62 * (t39 + t40) * (t63 - t83) * 2.0;
    A0[4][1] = t197 - t28 * t79 * t111 + t28 * t109 * (t65 - t194) - X_dot_d * t62 * t79 * t109 * 2.0 -
               X_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[4][2] = t202;
    A0[4][6] = t207;
    A0[4][7] = t122 + t208 + t28 * t109 * (t85 - t204) - Y_dot_d * t62 * t79 * t109 * 2.0 -
               Y_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[4][8] = t213;
    A0[4][12] = t216 + t217 + t46 * (t91 - t130 + t214 + t215) - t28 * t44 * t131 - t28 * t79 * t96;
    A0[4][13] = t221;
    A0[4][14] = t225 + t226 + t46 * (t103 + t222 + t223 - t224) - t28 * t79 * t156 - t28 * t131 * t141;
    A0[5][0] = t227 + t228 - t46 * (t64 - t113) - X_dot_d * t44 * t62 * t70 * 2.0 -
               X_dot_d * t25 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[5][1] = t234;
    A0[5][2] = t238;
    A0[5][6] = t241;
    A0[5][7] = t246;
    A0[5][8] = t248 + t249 - t46 * (t64 - t247) - Y_dot_d * t62 * t70 * t141 * 2.0 -
               Y_dot_d * t6 * t28 * t45 * t51 * (1.0 / 4.0);
    A0[5][12] = t251 + t252 - t253 - t28 * t44 * t134 - Z_dot_d * t44 * t62 * t70 * 2.0;
    A0[5][13] = t256 + t257 + t258 - t46 * (t91 + t130 - t254 + t255) - t28 * t70 * t132;
    A0[5][14] = t262;
}

void SurfCentroidNoConnec_f(const vector<double> &x, const vector<double> &y, const vector<double> &z,
                            const double totD, const double X_dot_d, const double Y_dot_d, const double Z_dot_d,
                            ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroidNoConnec_df(const vector<double> &x, const vector<double> &y, const vector<double> &z,
                             const double totD, const double X_dot_d, const double Y_dot_d, const double Z_dot_d,
                             ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t65, t20, t21, t22, t23,
        t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t70, t42, t43, t44,
        t45, t46, t47, t48, t49, t81, t50, t51, t52, t53, t54, t55, t56, t93, t57, t58, t59, t99, t60, t61, t62, t103,
        t63, t64, t66, t67, t107, t68, t69, t71, t72, t109, t73, t74, t75, t76, t77, t78, t79, t80, t82, t83, t84, t114,
        t85, t86, t87, t88, t89, t90, t91, t92, t94, t95, t96, t119, t97, t98, t100, t120, t101, t102, t104, t121, t105,
        t106, t108, t110, t111, t112, t113, t115, t116, t117, t118;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[2 - 1] - x[3 - 1];
    t6 = y[2 - 1] - y[3 - 1];
    t7 = z[2 - 1] - z[3 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10;
    t12 = x[2 - 1] * (1.0 / 2.0);
    t13 = t5 * t5;
    t14 = t6 * t6;
    t15 = t7 * t7;
    t16 = t13 + t14 + t15;
    t17 = x[1 - 1] * 2.0;
    t18 = x[2 - 1] * 2.0;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t65 = x[3 - 1] * 2.0;
    t20 = t18 - t65;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t16);
    t22 = 1.0 / totD;
    t23 = x[5 - 1] - x[6 - 1];
    t24 = y[5 - 1] - y[6 - 1];
    t25 = z[5 - 1] - z[6 - 1];
    t26 = x[6 - 1] - x[7 - 1];
    t27 = y[6 - 1] - y[7 - 1];
    t28 = z[6 - 1] - z[7 - 1];
    t29 = t23 * t23;
    t30 = t24 * t24;
    t31 = t25 * t25;
    t32 = t29 + t30 + t31;
    t33 = x[6 - 1] * (1.0 / 2.0);
    t34 = t26 * t26;
    t35 = t27 * t27;
    t36 = t28 * t28;
    t37 = t34 + t35 + t36;
    t38 = 1.0 / (totD * totD);
    t39 = x[5 - 1] * 2.0;
    t40 = x[6 - 1] * 2.0;
    t41 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t32);
    t70 = x[7 - 1] * 2.0;
    t42 = t40 - t70;
    t43 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t37);
    t44 = x[1 - 1] * (1.0 / 2.0);
    t45 = t12 + t44;
    t46 = x[3 - 1] * (1.0 / 2.0);
    t47 = t12 + t46;
    t48 = y[1 - 1] * 2.0;
    t49 = y[2 - 1] * 2.0;
    t81 = y[3 - 1] * 2.0;
    t50 = t49 - t81;
    t51 = x[5 - 1] * (1.0 / 2.0);
    t52 = t33 + t51;
    t53 = x[7 - 1] * (1.0 / 2.0);
    t54 = t33 + t53;
    t55 = y[5 - 1] * 2.0;
    t56 = y[6 - 1] * 2.0;
    t93 = y[7 - 1] * 2.0;
    t57 = t56 - t93;
    t58 = z[1 - 1] * 2.0;
    t59 = z[2 - 1] * 2.0;
    t99 = z[3 - 1] * 2.0;
    t60 = t59 - t99;
    t61 = z[5 - 1] * 2.0;
    t62 = z[6 - 1] * 2.0;
    t103 = z[7 - 1] * 2.0;
    t63 = t62 - t103;
    t64 = t17 - t18;
    t66 = y[2 - 1] * (1.0 / 2.0);
    t67 = t20 * t21 * (1.0 / 2.0);
    t107 = t19 * t64 * (1.0 / 2.0);
    t68 = t67 - t107;
    t69 = t39 - t40;
    t71 = y[6 - 1] * (1.0 / 2.0);
    t72 = t42 * t43 * (1.0 / 2.0);
    t109 = t41 * t69 * (1.0 / 2.0);
    t73 = t72 - t109;
    t74 = sqrt(t11);
    t75 = t74 * (1.0 / 2.0);
    t76 = sqrt(t16);
    t77 = t76 * (1.0 / 2.0);
    t78 = t48 - t49;
    t79 = y[1 - 1] * (1.0 / 2.0);
    t80 = t66 + t79;
    t82 = y[3 - 1] * (1.0 / 2.0);
    t83 = t66 + t82;
    t84 = t21 * t50 * (1.0 / 2.0);
    t114 = t19 * t78 * (1.0 / 2.0);
    t85 = t84 - t114;
    t86 = sqrt(t32);
    t87 = t86 * (1.0 / 2.0);
    t88 = sqrt(t37);
    t89 = t88 * (1.0 / 2.0);
    t90 = t55 - t56;
    t91 = y[5 - 1] * (1.0 / 2.0);
    t92 = t71 + t91;
    t94 = y[7 - 1] * (1.0 / 2.0);
    t95 = t71 + t94;
    t96 = t43 * t57 * (1.0 / 2.0);
    t119 = t41 * t90 * (1.0 / 2.0);
    t97 = t96 - t119;
    t98 = t58 - t59;
    t100 = t21 * t60 * (1.0 / 2.0);
    t120 = t19 * t98 * (1.0 / 2.0);
    t101 = t100 - t120;
    t102 = t61 - t62;
    t104 = t43 * t63 * (1.0 / 2.0);
    t121 = t41 * t102 * (1.0 / 2.0);
    t105 = t104 - t121;
    t106 = z[2 - 1] * (1.0 / 2.0);
    t108 = z[6 - 1] * (1.0 / 2.0);
    t110 = z[1 - 1] * (1.0 / 2.0);
    t111 = t106 + t110;
    t112 = z[3 - 1] * (1.0 / 2.0);
    t113 = t106 + t112;
    t115 = z[5 - 1] * (1.0 / 2.0);
    t116 = t108 + t115;
    t117 = z[7 - 1] * (1.0 / 2.0);
    t118 = t108 + t117;
    A0[0][0] = t22 * (t75 + t77 + t20 * t21 * t47 * (1.0 / 2.0) - t19 * t45 * (t17 - x[2 - 1] * 2.0) * (1.0 / 2.0)) -
               X_dot_d * t38 * t68;
    A0[0][1] = t22 * (t87 + t89 + t42 * t43 * t54 * (1.0 / 2.0) - t41 * t52 * (t39 - x[6 - 1] * 2.0) * (1.0 / 2.0)) -
               X_dot_d * t38 * t73;
    A0[0][2] =
        t22 * (t21 * t47 * t50 * (1.0 / 2.0) - t19 * t45 * (t48 - y[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t38 * t85;
    A0[0][3] =
        t22 * (t43 * t54 * t57 * (1.0 / 2.0) - t41 * t52 * (t55 - y[6 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t38 * t97;
    A0[0][4] =
        t22 * (t21 * t47 * t60 * (1.0 / 2.0) - t19 * t45 * (t58 - z[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t38 * t101;
    A0[0][5] =
        t22 * (t43 * t54 * t63 * (1.0 / 2.0) - t41 * t52 * (t61 - z[6 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t38 * t105;
    A0[1][0] = t22 * (t20 * t21 * t83 * (1.0 / 2.0) - t19 * t64 * t80 * (1.0 / 2.0)) - Y_dot_d * t38 * t68;
    A0[1][1] = t22 * (t42 * t43 * t95 * (1.0 / 2.0) - t41 * t69 * t92 * (1.0 / 2.0)) - Y_dot_d * t38 * t73;
    A0[1][2] = t22 * (t75 + t77 + t21 * t50 * t83 * (1.0 / 2.0) - t19 * t78 * t80 * (1.0 / 2.0)) - Y_dot_d * t38 * t85;
    A0[1][3] = t22 * (t87 + t89 + t43 * t57 * t95 * (1.0 / 2.0) - t41 * t90 * t92 * (1.0 / 2.0)) - Y_dot_d * t38 * t97;
    A0[1][4] = t22 * (t21 * t60 * t83 * (1.0 / 2.0) - t19 * t80 * t98 * (1.0 / 2.0)) - Y_dot_d * t38 * t101;
    A0[1][5] = t22 * (t43 * t63 * t95 * (1.0 / 2.0) - t41 * t92 * t102 * (1.0 / 2.0)) - Y_dot_d * t38 * t105;
    A0[2][0] = t22 * (t20 * t21 * t113 * (1.0 / 2.0) - t19 * t64 * t111 * (1.0 / 2.0)) - Z_dot_d * t38 * t68;
    A0[2][1] = t22 * (t42 * t43 * t118 * (1.0 / 2.0) - t41 * t69 * t116 * (1.0 / 2.0)) - Z_dot_d * t38 * t73;
    A0[2][2] = t22 * (t21 * t50 * t113 * (1.0 / 2.0) - t19 * t78 * t111 * (1.0 / 2.0)) - Z_dot_d * t38 * t85;
    A0[2][3] = t22 * (t43 * t57 * t118 * (1.0 / 2.0) - t41 * t90 * t116 * (1.0 / 2.0)) - Z_dot_d * t38 * t97;
    A0[2][4] =
        t22 * (t75 + t77 + t21 * t60 * t113 * (1.0 / 2.0) - t19 * t98 * t111 * (1.0 / 2.0)) - Z_dot_d * t38 * t101;
    A0[2][5] =
        t22 * (t87 + t89 + t43 * t63 * t118 * (1.0 / 2.0) - t41 * t102 * t116 * (1.0 / 2.0)) - Z_dot_d * t38 * t105;
}

void SurfCentroidNoConnec_ddf(const vector<double> &x, const vector<double> &y, const vector<double> &z,
                              const double totD, const double X_dot_d, const double Y_dot_d, const double Z_dot_d,
                              ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24,
        t25, t26, t44, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t47, t37, t38, t39, t40, t41, t42, t43, t45,
        t46, t48, t49, t50, t51, t52, t53, t54, t57, t55, t56, t58, t59, t60, t61, t62, t63, t64, t65, t66, t90, t67,
        t70, t68, t191, t69, t71, t72, t73, t74, t75, t76, t79, t77, t78, t80, t81, t82, t84, t83, t85, t86, t87, t88,
        t89, t91, t92, t93, t94, t101, t95, t196, t96, t97, t98, t99, t100, t102, t103, t104, t105, t106, t107, t108,
        t109, t110, t111, t112, t113, t114, t115, t116, t208, t117, t118, t119, t122, t120, t121, t123, t165, t124,
        t125, t126, t127, t131, t128, t129, t134, t130, t132, t171, t133, t135, t174, t136, t137, t175, t138, t139,
        t140, t141, t142, t179, t143, t144, t148, t145, t146, t184, t147, t149, t150, t151, t152, t185, t153, t154,
        t186, t155, t156, t161, t157, t158, t159, t189, t160, t162, t163, t168, t164, t166, t167, t170, t169, t172,
        t195, t173, t176, t177, t183, t178, t180, t181, t182, t187, t190, t188, t192, t193, t194, t197, t198, t199,
        t200, t281, t201, t202, t203, t204, t205, t206, t207, t209, t210, t211, t212, t213, t214, t215, t216, t217,
        t218, t219, t220, t221, t240, t222, t223, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233, t234,
        t235, t236, t237, t238, t239, t241, t242, t243, t244, t245, t246, t247, t248, t249, t250, t251, t252, t253,
        t254, t255, t256, t257, t258, t259, t260, t261, t262, t263, t264, t265, t266, t267, t268, t269, t270, t271,
        t272, t273, t274, t275, t276, t277, t278, t279, t280, t282, t283, t284, t285, t286, t287, t288, t289;
    t2 = x[5 - 1] - x[6 - 1];
    t3 = y[5 - 1] - y[6 - 1];
    t4 = z[5 - 1] - z[6 - 1];
    t5 = x[6 - 1] - x[7 - 1];
    t6 = y[6 - 1] - y[7 - 1];
    t7 = z[6 - 1] - z[7 - 1];
    t8 = x[1 - 1] - x[2 - 1];
    t9 = y[1 - 1] - y[2 - 1];
    t10 = z[1 - 1] - z[2 - 1];
    t11 = x[2 - 1] - x[3 - 1];
    t12 = y[2 - 1] - y[3 - 1];
    t13 = z[2 - 1] - z[3 - 1];
    t14 = t8 * t8;
    t15 = t9 * t9;
    t16 = t10 * t10;
    t17 = t14 + t15 + t16;
    t18 = x[2 - 1] * (1.0 / 2.0);
    t19 = t11 * t11;
    t20 = t12 * t12;
    t21 = t13 * t13;
    t22 = t19 + t20 + t21;
    t23 = 1.0 / (totD * totD);
    t24 = x[1 - 1] * 2.0;
    t25 = x[2 - 1] * 2.0;
    t26 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t17);
    t44 = x[3 - 1] * 2.0;
    t27 = t25 - t44;
    t28 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t22);
    t29 = y[5 - 1] * 2.0;
    t30 = y[6 - 1] * 2.0;
    t31 = t2 * t2;
    t32 = t3 * t3;
    t33 = t4 * t4;
    t34 = t31 + t32 + t33;
    t35 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t34);
    t36 = x[6 - 1] * (1.0 / 2.0);
    t47 = y[7 - 1] * 2.0;
    t37 = t30 - t47;
    t38 = t5 * t5;
    t39 = t6 * t6;
    t40 = t7 * t7;
    t41 = t38 + t39 + t40;
    t42 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t41);
    t43 = t24 - t25;
    t45 = t27 * t28 * (1.0 / 2.0);
    t46 = t29 - t30;
    t48 = t37 * t42 * (1.0 / 2.0);
    t49 = x[1 - 1] * (1.0 / 2.0);
    t50 = t18 + t49;
    t51 = z[1 - 1] * 2.0;
    t52 = z[2 - 1] * 2.0;
    t53 = x[3 - 1] * (1.0 / 2.0);
    t54 = t18 + t53;
    t57 = z[3 - 1] * 2.0;
    t55 = t52 - t57;
    t56 = t51 - t52;
    t58 = sqrt(t17);
    t59 = t58 * (1.0 / 2.0);
    t60 = sqrt(t22);
    t61 = t60 * (1.0 / 2.0);
    t62 = t27 * t28 * t54 * (1.0 / 2.0);
    t63 = 1.0 / pow(t17, 3.0 / 2.0);
    t64 = 1.0 / pow(t22, 3.0 / 2.0);
    t65 = 1.0 / (totD * totD * totD);
    t66 = t26 * t56 * (1.0 / 2.0);
    t90 = t28 * t55 * (1.0 / 2.0);
    t67 = t66 - t90;
    t70 = t26 * t43 * (1.0 / 2.0);
    t68 = t45 - t70;
    t191 = t26 * t43 * t50 * (1.0 / 2.0);
    t69 = t59 + t61 + t62 - t191;
    t71 = x[5 - 1] * (1.0 / 2.0);
    t72 = t36 + t71;
    t73 = z[5 - 1] * 2.0;
    t74 = z[6 - 1] * 2.0;
    t75 = x[7 - 1] * (1.0 / 2.0);
    t76 = t36 + t75;
    t79 = z[7 - 1] * 2.0;
    t77 = t74 - t79;
    t78 = t73 - t74;
    t80 = t42 * t77 * (1.0 / 2.0);
    t81 = y[6 - 1] * (1.0 / 2.0);
    t82 = y[2 - 1] * (1.0 / 2.0);
    t84 = t35 * t46 * (1.0 / 2.0);
    t83 = t48 - t84;
    t85 = 1.0 / totD;
    t86 = y[1 - 1] * (1.0 / 2.0);
    t87 = t82 + t86;
    t88 = y[3 - 1] * (1.0 / 2.0);
    t89 = t82 + t88;
    t91 = t27 * t28 * t89 * (1.0 / 2.0);
    t92 = t43 * t56 * t63 * (1.0 / 4.0);
    t93 = t27 * t55 * t64 * (1.0 / 4.0);
    t94 = t92 + t93;
    t101 = t35 * t78 * (1.0 / 2.0);
    t95 = t80 - t101;
    t196 = t26 * t43 * t87 * (1.0 / 2.0);
    t96 = t91 - t196;
    t97 = y[5 - 1] * (1.0 / 2.0);
    t98 = t81 + t97;
    t99 = y[7 - 1] * (1.0 / 2.0);
    t100 = t81 + t99;
    t102 = z[2 - 1] * (1.0 / 2.0);
    t103 = z[6 - 1] * (1.0 / 2.0);
    t104 = z[1 - 1] * (1.0 / 2.0);
    t105 = t102 + t104;
    t106 = z[3 - 1] * (1.0 / 2.0);
    t107 = t102 + t106;
    t108 = t27 * t28 * t107 * (1.0 / 2.0);
    t109 = sqrt(t34);
    t110 = t109 * (1.0 / 2.0);
    t111 = sqrt(t41);
    t112 = t111 * (1.0 / 2.0);
    t113 = z[5 - 1] * (1.0 / 2.0);
    t114 = t103 + t113;
    t115 = z[7 - 1] * (1.0 / 2.0);
    t116 = t103 + t115;
    t208 = t26 * t43 * t105 * (1.0 / 2.0);
    t117 = t108 - t208;
    t118 = x[5 - 1] * 2.0;
    t119 = x[6 - 1] * 2.0;
    t122 = x[7 - 1] * 2.0;
    t120 = t119 - t122;
    t121 = t118 - t119;
    t123 = t35 * t46 * t72 * (1.0 / 2.0);
    t165 = t37 * t42 * t76 * (1.0 / 2.0);
    t124 = t123 - t165;
    t125 = 1.0 / pow(t34, 3.0 / 2.0);
    t126 = 1.0 / pow(t41, 3.0 / 2.0);
    t127 = t35 * t121 * (1.0 / 2.0);
    t131 = t42 * t120 * (1.0 / 2.0);
    t128 = t127 - t131;
    t129 = t42 * t76 * t120 * (1.0 / 2.0);
    t134 = t35 * t72 * t121 * (1.0 / 2.0);
    t130 = t110 + t112 + t129 - t134;
    t132 = t26 * t50 * t56 * (1.0 / 2.0);
    t171 = t28 * t54 * t55 * (1.0 / 2.0);
    t133 = t132 - t171;
    t135 = t35 * t72 * t78 * (1.0 / 2.0);
    t174 = t42 * t76 * t77 * (1.0 / 2.0);
    t136 = t135 - t174;
    t137 = t37 * t42 * t100 * (1.0 / 2.0);
    t175 = t35 * t46 * t98 * (1.0 / 2.0);
    t138 = t110 + t112 + t137 - t175;
    t139 = t46 * t121 * t125 * (1.0 / 4.0);
    t140 = t37 * t120 * t126 * (1.0 / 4.0);
    t141 = t139 + t140;
    t142 = t26 * t56 * t87 * (1.0 / 2.0);
    t179 = t28 * t55 * t89 * (1.0 / 2.0);
    t143 = t142 - t179;
    t144 = t35 * t98 * t121 * (1.0 / 2.0);
    t148 = t42 * t100 * t120 * (1.0 / 2.0);
    t145 = t144 - t148;
    t146 = t35 * t78 * t98 * (1.0 / 2.0);
    t184 = t42 * t77 * t100 * (1.0 / 2.0);
    t147 = t146 - t184;
    t149 = t78 * t121 * t125 * (1.0 / 4.0);
    t150 = t77 * t120 * t126 * (1.0 / 4.0);
    t151 = t149 + t150;
    t152 = t35 * t46 * t114 * (1.0 / 2.0);
    t185 = t37 * t42 * t116 * (1.0 / 2.0);
    t153 = t152 - t185;
    t154 = t28 * t55 * t107 * (1.0 / 2.0);
    t186 = t26 * t56 * t105 * (1.0 / 2.0);
    t155 = t59 + t61 + t154 - t186;
    t156 = t35 * t114 * t121 * (1.0 / 2.0);
    t161 = t42 * t116 * t120 * (1.0 / 2.0);
    t157 = t156 - t161;
    t158 = t35 * t121 * (1.0 / 4.0);
    t159 = t42 * t77 * t116 * (1.0 / 2.0);
    t189 = t35 * t78 * t114 * (1.0 / 2.0);
    t160 = t110 + t112 + t159 - t189;
    t162 = y[1 - 1] * 2.0;
    t163 = y[2 - 1] * 2.0;
    t168 = y[3 - 1] * 2.0;
    t164 = t163 - t168;
    t166 = t162 - t163;
    t167 = t26 * t166 * (1.0 / 2.0);
    t170 = t28 * t164 * (1.0 / 2.0);
    t169 = t167 - t170;
    t172 = t28 * t54 * t164 * (1.0 / 2.0);
    t195 = t26 * t50 * t166 * (1.0 / 2.0);
    t173 = t172 - t195;
    t176 = t26 * t56 * (1.0 / 4.0);
    t177 = t28 * t89 * t164 * (1.0 / 2.0);
    t183 = t26 * t87 * t166 * (1.0 / 2.0);
    t178 = t59 + t61 + t177 - t183;
    t180 = t56 * t63 * t166 * (1.0 / 4.0);
    t181 = t55 * t64 * t164 * (1.0 / 4.0);
    t182 = t180 + t181;
    t187 = t26 * t105 * t166 * (1.0 / 2.0);
    t190 = t28 * t107 * t164 * (1.0 / 2.0);
    t188 = t187 - t190;
    t192 = t35 * t46 * (1.0 / 4.0);
    t193 = t37 * t76 * t120 * t126 * (1.0 / 4.0);
    t194 = X_dot_d * t23 * t141;
    t197 = Y_dot_d * t65 * (t45 - t70) * (t48 - t84) * 2.0;
    t198 = t197 - t23 * t83 * t96 - t23 * t68 * t138;
    t199 = t46 * t98 * t121 * t125 * (1.0 / 4.0);
    t200 = t37 * t100 * t120 * t126 * (1.0 / 4.0);
    t281 = t42 * t120 * (1.0 / 4.0);
    t201 = t158 + t199 + t200 - t281;
    t202 = t23 * t128 * t138;
    t203 = t23 * t145 * (t48 - t84);
    t204 = Y_dot_d * t23 * t141;
    t205 = t202 + t203 + t204 - t85 * t201 - Y_dot_d * t65 * t83 * t128 * 2.0;
    t206 = t23 * t138 * t169;
    t207 = t206 - t23 * t83 * t178 - Y_dot_d * t65 * t83 * t169 * 2.0;
    t209 = t23 * t153 * (t45 - t70);
    t210 = Z_dot_d * t65 * (t45 - t70) * (t48 - t84) * 2.0;
    t211 = t209 + t210 - t23 * t83 * t117;
    t212 = t46 * t114 * t121 * t125 * (1.0 / 4.0);
    t213 = t37 * t116 * t120 * t126 * (1.0 / 4.0);
    t214 = t212 + t213;
    t215 = t23 * t157 * (t48 - t84);
    t216 = Z_dot_d * t23 * t141;
    t217 = t215 + t216 - t85 * t214 - t23 * t128 * t153 - Z_dot_d * t65 * t83 * t128 * 2.0;
    t218 = t23 * t188 * (t48 - t84);
    t219 = t218 - t23 * t153 * t169 - Z_dot_d * t65 * t83 * t169 * 2.0;
    t220 = t43 * t50 * t56 * t63 * (1.0 / 4.0);
    t221 = t27 * t54 * t55 * t64 * (1.0 / 4.0);
    t240 = t28 * t55 * (1.0 / 4.0);
    t222 = t176 + t220 + t221 - t240;
    t223 = t23 * t67 * t69;
    t224 = X_dot_d * t23 * t94;
    t225 = t23 * t67 * t130;
    t226 = X_dot_d * t65 * t67 * t128 * 2.0;
    t227 = t225 + t226 - t23 * t128 * t133;
    t228 = t50 * t56 * t63 * t166 * (1.0 / 4.0);
    t229 = t54 * t55 * t64 * t164 * (1.0 / 4.0);
    t230 = t228 + t229;
    t231 = X_dot_d * t23 * t182;
    t232 = X_dot_d * t65 * t67 * t169 * 2.0;
    t233 = t43 * t56 * t63 * t87 * (1.0 / 4.0);
    t234 = t27 * t55 * t64 * t89 * (1.0 / 4.0);
    t235 = t233 + t234;
    t236 = t23 * t143 * (t45 - t70);
    t237 = Y_dot_d * t23 * t94;
    t238 = Y_dot_d * t65 * t67 * t128 * 2.0;
    t239 = t238 - t23 * t67 * t145 - t23 * t128 * t143;
    t241 = t56 * t63 * t87 * t166 * (1.0 / 4.0);
    t242 = t55 * t64 * t89 * t164 * (1.0 / 4.0);
    t243 = t23 * t67 * t178;
    t244 = Y_dot_d * t23 * t182;
    t245 = Y_dot_d * t65 * t67 * t169 * 2.0;
    t246 = t26 * t43 * (1.0 / 4.0);
    t247 = t43 * t56 * t63 * t105 * (1.0 / 4.0);
    t248 = t27 * t55 * t64 * t107 * (1.0 / 4.0);
    t249 = t246 + t247 + t248 - t27 * t28 * (1.0 / 4.0);
    t250 = Z_dot_d * t23 * t94;
    t251 = t23 * t128 * t155;
    t252 = Z_dot_d * t65 * t67 * t128 * 2.0;
    t253 = t251 + t252 - t23 * t67 * t157;
    t254 = t26 * t166 * (1.0 / 4.0);
    t255 = t56 * t63 * t105 * t166 * (1.0 / 4.0);
    t256 = t55 * t64 * t107 * t164 * (1.0 / 4.0);
    t257 = t254 + t255 + t256 - t28 * t164 * (1.0 / 4.0);
    t258 = t23 * t155 * t169;
    t259 = Z_dot_d * t23 * t182;
    t260 = Z_dot_d * t65 * t67 * t169 * 2.0;
    t261 = t258 + t259 + t260 - t85 * t257 - t23 * t67 * t188;
    t262 = t35 * t78 * (1.0 / 4.0);
    t263 = t72 * t78 * t121 * t125 * (1.0 / 4.0);
    t264 = t76 * t77 * t120 * t126 * (1.0 / 4.0);
    t265 = t262 + t263 + t264 - t42 * t77 * (1.0 / 4.0);
    t266 = X_dot_d * t23 * t151;
    t267 = t266 - t85 * t265 - t23 * t95 * t130 - t23 * t128 * t136 - X_dot_d * t65 * t95 * t128 * 2.0;
    t268 = -t23 * t95 * t173 - t23 * t136 * t169 - X_dot_d * t65 * t95 * t169 * 2.0;
    t269 = t23 * t147 * (t45 - t70);
    t270 = Y_dot_d * t65 * (t45 - t70) * (t80 - t101) * 2.0;
    t271 = t269 + t270 - t23 * t95 * t96;
    t272 = t78 * t98 * t121 * t125 * (1.0 / 4.0);
    t273 = t77 * t100 * t120 * t126 * (1.0 / 4.0);
    t274 = t272 + t273;
    t275 = t23 * t145 * (t80 - t101);
    t276 = Y_dot_d * t23 * t151;
    t277 = t275 + t276 - t85 * t274 - t23 * t128 * t147 - Y_dot_d * t65 * t95 * t128 * 2.0;
    t278 = -t23 * t95 * t178 - t23 * t147 * t169 - Y_dot_d * t65 * t95 * t169 * 2.0;
    t279 = Z_dot_d * t65 * (t45 - t70) * (t80 - t101) * 2.0;
    t280 = t279 - t23 * t95 * t117 - t23 * t68 * t160;
    t282 = t78 * t114 * t121 * t125 * (1.0 / 4.0);
    t283 = t77 * t116 * t120 * t126 * (1.0 / 4.0);
    t284 = t23 * t128 * t160;
    t285 = t23 * t157 * (t80 - t101);
    t286 = Z_dot_d * t23 * t151;
    t287 = t23 * t160 * t169;
    t288 = t23 * t188 * (t80 - t101);
    t289 = t287 + t288 - Z_dot_d * t65 * t95 * t169 * 2.0;
    A0[0][3] = t23 * t68 * t124 -
               t23 * (t48 - t35 * (t29 - y[6 - 1] * 2.0) * (1.0 / 2.0)) *
                   (t59 + t61 + t62 - t26 * t50 * (t24 - x[2 - 1] * 2.0) * (1.0 / 2.0)) +
               X_dot_d * t65 * t68 * t83 * 2.0;
    A0[0][4] = t223 + t224 - t85 * t222 + t23 * t68 * t133 - X_dot_d * t65 * t67 * t68 * 2.0;
    A0[0][5] = -t23 * t69 * (t80 - t35 * (t73 - z[6 - 1] * 2.0) * (1.0 / 2.0)) + t23 * t68 * t136 +
               X_dot_d * t65 * t95 * (t45 - t70) * 2.0;
    A0[0][9] = t198;
    A0[0][10] = t236 + t237 - t85 * t235 + t23 * t67 * t96 - Y_dot_d * t65 * t67 * t68 * 2.0;
    A0[0][11] = t271;
    A0[0][15] = t211;
    A0[0][16] = t250 - t85 * t249 + t23 * t67 * t117 - t23 * t68 * t155 - Z_dot_d * t65 * t67 * t68 * 2.0;
    A0[0][17] = t280;
    A0[1][3] =
        t194 -
        t85 * (t192 + t193 - t37 * t42 * (1.0 / 4.0) + t46 * t72 * t125 * (t118 - x[6 - 1] * 2.0) * (1.0 / 4.0)) -
        t23 * t83 * t130 - t23 * t124 * t128 - X_dot_d * t65 * t83 * t128 * 2.0;
    A0[1][4] = t227;
    A0[1][5] = t267;
    A0[1][9] = t205;
    A0[1][10] = t239;
    A0[1][11] = t277;
    A0[1][15] = t217;
    A0[1][16] = t253;
    A0[1][17] =
        t284 + t285 + t286 - t85 * (t158 + t282 + t283 - t42 * t120 * (1.0 / 4.0)) - Z_dot_d * t65 * t95 * t128 * 2.0;
    A0[2][3] = -t23 * (t48 - t84) * (t172 - t26 * t50 * (t162 - y[2 - 1] * 2.0) * (1.0 / 2.0)) - t23 * t124 * t169 -
               X_dot_d * t65 * t83 * t169 * 2.0;
    A0[2][4] = t231 + t232 - t85 * t230 + t23 * t67 * t173 - t23 * t133 * t169;
    A0[2][5] = t268;
    A0[2][9] = t207;
    A0[2][10] = t243 + t244 + t245 - t85 * (t176 + t241 + t242 - t28 * t55 * (1.0 / 4.0)) - t23 * t143 * t169;
    A0[2][11] = t278;
    A0[2][15] = t219;
    A0[2][16] = t261;
    A0[2][17] = t289;
    A0[3][0] = -t23 * t69 * t83 + t23 * t124 * (t45 - t70) + X_dot_d * t65 * (t45 - t70) * (t48 - t84) * 2.0;
    A0[3][1] = t194 - t85 * (t192 + t193 - t37 * t42 * (1.0 / 4.0) + t46 * t72 * t121 * t125 * (1.0 / 4.0)) -
               t23 * t83 * t130 - t23 * t124 * t128 - X_dot_d * t65 * t83 * t128 * 2.0;
    A0[3][2] = -t23 * t83 * t173 - t23 * t124 * t169 - X_dot_d * t65 * t83 * t169 * 2.0;
    A0[3][6] = t198;
    A0[3][7] = t205;
    A0[3][8] = t207;
    A0[3][12] = t211;
    A0[3][13] = t217;
    A0[3][14] = t219;
    A0[4][0] = t223 + t224 - t85 * t222 + t23 * t133 * (t45 - t70) - X_dot_d * t65 * t67 * t68 * 2.0;
    A0[4][1] = t227;
    A0[4][2] = t231 + t232 - t85 * t230 - t23 * t133 * t169 + t23 * t67 * (t172 - t195);
    A0[4][6] = t236 + t237 - t85 * t235 + t23 * t67 * (t91 - t196) - Y_dot_d * t65 * t67 * t68 * 2.0;
    A0[4][7] = t239;
    A0[4][8] = t243 + t244 + t245 - t85 * (t176 - t240 + t241 + t242) - t23 * t143 * t169;
    A0[4][12] = t250 - t85 * t249 - t23 * t68 * t155 + t23 * t67 * (t108 - t208) - Z_dot_d * t65 * t67 * t68 * 2.0;
    A0[4][13] = t253;
    A0[4][14] = t261;
    A0[5][0] = -t23 * t69 * t95 + t23 * t136 * (t45 - t70) + X_dot_d * t65 * (t45 - t70) * (t80 - t101) * 2.0;
    A0[5][1] = t267;
    A0[5][2] = t268;
    A0[5][6] = t271;
    A0[5][7] = t277;
    A0[5][8] = t278;
    A0[5][12] = t280;
    A0[5][13] = t284 + t285 + t286 - t85 * (t158 - t281 + t282 + t283) - Z_dot_d * t65 * t95 * t128 * 2.0;
    A0[5][14] = t289;
}

void SurfCentroidSelf_f(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                        const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2;
    t2 = 1.0 / totD;
    A0[0][0] = X_dot_d * t2;
    A0[0][1] = Y_dot_d * t2;
    A0[0][2] = Z_dot_d * t2;
}

void SurfCentroidSelf_df(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                         const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t35, t20, t21, t22, t23,
        t24, t25, t26, t27, t28, t29, t46, t30, t31, t32, t52, t33, t34, t36, t37, t56, t38, t39, t40, t41, t42, t43,
        t44, t45, t47, t48, t49, t61, t50, t51, t53, t62, t54, t55, t57, t58, t59, t60;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = x[2 - 1] - x[3 - 1];
    t6 = y[2 - 1] - y[3 - 1];
    t7 = z[2 - 1] - z[3 - 1];
    t8 = t2 * t2;
    t9 = t3 * t3;
    t10 = t4 * t4;
    t11 = t8 + t9 + t10;
    t12 = x[2 - 1] * (1.0 / 2.0);
    t13 = t5 * t5;
    t14 = t6 * t6;
    t15 = t7 * t7;
    t16 = t13 + t14 + t15;
    t17 = x[1 - 1] * 2.0;
    t18 = x[2 - 1] * 2.0;
    t19 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t11);
    t35 = x[3 - 1] * 2.0;
    t20 = t18 - t35;
    t21 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t16);
    t22 = 1.0 / totD;
    t23 = x[1 - 1] * (1.0 / 2.0);
    t24 = t12 + t23;
    t25 = x[3 - 1] * (1.0 / 2.0);
    t26 = t12 + t25;
    t27 = 1.0 / (totD * totD);
    t28 = y[1 - 1] * 2.0;
    t29 = y[2 - 1] * 2.0;
    t46 = y[3 - 1] * 2.0;
    t30 = t29 - t46;
    t31 = z[1 - 1] * 2.0;
    t32 = z[2 - 1] * 2.0;
    t52 = z[3 - 1] * 2.0;
    t33 = t32 - t52;
    t34 = t17 - t18;
    t36 = y[2 - 1] * (1.0 / 2.0);
    t37 = t20 * t21 * (1.0 / 2.0);
    t56 = t19 * t34 * (1.0 / 2.0);
    t38 = t37 - t56;
    t39 = sqrt(t11);
    t40 = t39 * (1.0 / 2.0);
    t41 = sqrt(t16);
    t42 = t41 * (1.0 / 2.0);
    t43 = t28 - t29;
    t44 = y[1 - 1] * (1.0 / 2.0);
    t45 = t36 + t44;
    t47 = y[3 - 1] * (1.0 / 2.0);
    t48 = t36 + t47;
    t49 = t21 * t30 * (1.0 / 2.0);
    t61 = t19 * t43 * (1.0 / 2.0);
    t50 = t49 - t61;
    t51 = t31 - t32;
    t53 = t21 * t33 * (1.0 / 2.0);
    t62 = t19 * t51 * (1.0 / 2.0);
    t54 = t53 - t62;
    t55 = z[2 - 1] * (1.0 / 2.0);
    t57 = z[1 - 1] * (1.0 / 2.0);
    t58 = t55 + t57;
    t59 = z[3 - 1] * (1.0 / 2.0);
    t60 = t55 + t59;
    A0[0][0] = t22 * (t40 + t42 + t20 * t21 * t26 * (1.0 / 2.0) - t19 * t24 * (t17 - x[2 - 1] * 2.0) * (1.0 / 2.0)) -
               X_dot_d * t27 * t38;
    A0[0][1] =
        t22 * (t21 * t26 * t30 * (1.0 / 2.0) - t19 * t24 * (t28 - y[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t27 * t50;
    A0[0][2] =
        t22 * (t21 * t26 * t33 * (1.0 / 2.0) - t19 * t24 * (t31 - z[2 - 1] * 2.0) * (1.0 / 2.0)) - X_dot_d * t27 * t54;
    A0[1][0] = t22 * (t20 * t21 * t48 * (1.0 / 2.0) - t19 * t34 * t45 * (1.0 / 2.0)) - Y_dot_d * t27 * t38;
    A0[1][1] = t22 * (t40 + t42 + t21 * t30 * t48 * (1.0 / 2.0) - t19 * t43 * t45 * (1.0 / 2.0)) - Y_dot_d * t27 * t50;
    A0[1][2] = t22 * (t21 * t33 * t48 * (1.0 / 2.0) - t19 * t45 * t51 * (1.0 / 2.0)) - Y_dot_d * t27 * t54;
    A0[2][0] = t22 * (t20 * t21 * t60 * (1.0 / 2.0) - t19 * t34 * t58 * (1.0 / 2.0)) - Z_dot_d * t27 * t38;
    A0[2][1] = t22 * (t21 * t30 * t60 * (1.0 / 2.0) - t19 * t43 * t58 * (1.0 / 2.0)) - Z_dot_d * t27 * t50;
    A0[2][2] = t22 * (t40 + t42 + t21 * t33 * t60 * (1.0 / 2.0) - t19 * t51 * t58 * (1.0 / 2.0)) - Z_dot_d * t27 * t54;
}

void SurfCentroidSelf_ddf(const vector<double> &x, const vector<double> &y, const vector<double> &z, const double totD,
                          const double X_dot_d, const double Y_dot_d, const double Z_dot_d, ArrayVec<double> &A0)
{
    double t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t27,
        t24, t25, t26, t28, t35, t29, t30, t31, t32, t33, t34, t36, t37, t38, t41, t39, t40, t42, t43, t44, t45, t46,
        t56, t47, t48, t49, t66, t50, t51, t52, t55, t53, t54, t57, t72, t58, t59, t60, t61, t62, t63, t64, t83, t84,
        t65, t67, t73, t68, t69, t70, t71, t74, t75, t76, t77, t78, t79, t80, t81, t82, t85, t88, t86, t87, t89, t90,
        t91, t137, t92, t93, t94, t103, t95, t96, t97, t98, t99, t100, t101, t102, t104, t144, t105, t106, t107, t171,
        t108, t109, t117, t110, t111, t112, t113, t114, t115, t134, t135, t116, t118, t119, t159, t120, t121, t122,
        t123, t124, t125, t126, t127, t136, t128, t129, t130, t131, t132, t133, t138, t174, t139, t140, t141, t163,
        t142, t143, t145, t146, t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t160, t161,
        t162, t164, t165, t166, t167, t168, t169, t183, t184, t170, t172, t173, t175, t176, t177, t178, t179, t180,
        t181, t182;
    t2 = x[1 - 1] - x[2 - 1];
    t3 = y[1 - 1] - y[2 - 1];
    t4 = z[1 - 1] - z[2 - 1];
    t5 = t2 * t2;
    t6 = t3 * t3;
    t7 = t4 * t4;
    t8 = t5 + t6 + t7;
    t9 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t8);
    t10 = x[2 - 1] - x[3 - 1];
    t11 = y[2 - 1] - y[3 - 1];
    t12 = z[2 - 1] - z[3 - 1];
    t13 = x[2 - 1] * (1.0 / 2.0);
    t14 = t10 * t10;
    t15 = t11 * t11;
    t16 = t12 * t12;
    t17 = t14 + t15 + t16;
    t18 = 1.0 / sqrt(rsvsmath_automatic_eps_centre + t17);
    t19 = x[1 - 1] * 2.0;
    t20 = x[2 - 1] * 2.0;
    t21 = t19 - t20;
    t22 = x[1 - 1] * (1.0 / 2.0);
    t23 = t13 + t22;
    t27 = x[3 - 1] * 2.0;
    t24 = t20 - t27;
    t25 = x[3 - 1] * (1.0 / 2.0);
    t26 = t13 + t25;
    t28 = t18 * t24 * (1.0 / 2.0);
    t35 = t9 * t21 * (1.0 / 2.0);
    t29 = t28 - t35;
    t30 = t21 * t21;
    t31 = 1.0 / pow(t8, 3.0 / 2.0);
    t32 = t24 * t24;
    t33 = 1.0 / pow(t17, 3.0 / 2.0);
    t34 = 1.0 / (totD * totD);
    t36 = 1.0 / totD;
    t37 = y[1 - 1] * 2.0;
    t38 = y[2 - 1] * 2.0;
    t41 = y[3 - 1] * 2.0;
    t39 = t38 - t41;
    t40 = t37 - t38;
    t42 = sqrt(t8);
    t43 = t42 * (1.0 / 2.0);
    t44 = sqrt(t17);
    t45 = t44 * (1.0 / 2.0);
    t46 = t18 * t24 * t26 * (1.0 / 2.0);
    t56 = t9 * t21 * t23 * (1.0 / 2.0);
    t47 = t43 + t45 + t46 - t56;
    t48 = 1.0 / (totD * totD * totD);
    t49 = t9 * t40 * (1.0 / 2.0);
    t66 = t18 * t39 * (1.0 / 2.0);
    t50 = t49 - t66;
    t51 = z[1 - 1] * 2.0;
    t52 = z[2 - 1] * 2.0;
    t55 = z[3 - 1] * 2.0;
    t53 = t52 - t55;
    t54 = t51 - t52;
    t57 = t9 * t54 * (1.0 / 2.0);
    t72 = t18 * t53 * (1.0 / 2.0);
    t58 = t57 - t72;
    t59 = y[2 - 1] * (1.0 / 2.0);
    t60 = y[1 - 1] * (1.0 / 2.0);
    t61 = t59 + t60;
    t62 = y[3 - 1] * (1.0 / 2.0);
    t63 = t59 + t62;
    t64 = t28 - t35;
    t83 = t30 * t31 * (1.0 / 4.0);
    t84 = t32 * t33 * (1.0 / 4.0);
    t65 = t9 + t18 - t83 - t84;
    t67 = t9 * t21 * t61 * (1.0 / 2.0);
    t73 = t18 * t24 * t63 * (1.0 / 2.0);
    t68 = t67 - t73;
    t69 = t21 * t31 * t40 * (1.0 / 4.0);
    t70 = t24 * t33 * t39 * (1.0 / 4.0);
    t71 = t69 + t70;
    t74 = t21 * t31 * t54 * (1.0 / 4.0);
    t75 = t24 * t33 * t53 * (1.0 / 4.0);
    t76 = t74 + t75;
    t77 = z[2 - 1] * (1.0 / 2.0);
    t78 = z[1 - 1] * (1.0 / 2.0);
    t79 = t77 + t78;
    t80 = z[3 - 1] * (1.0 / 2.0);
    t81 = t77 + t80;
    t82 = t28 - t35;
    t85 = t9 * t21 * t79 * (1.0 / 2.0);
    t88 = t18 * t24 * t81 * (1.0 / 2.0);
    t86 = t85 - t88;
    t87 = t9 * t21 * (1.0 / 4.0);
    t89 = t9 * t40 * (1.0 / 4.0);
    t90 = t21 * t23 * t31 * t40 * (1.0 / 4.0);
    t91 = t24 * t26 * t33 * t39 * (1.0 / 4.0);
    t137 = t18 * t39 * (1.0 / 4.0);
    t92 = t89 + t90 + t91 - t137;
    t93 = t34 * t47 * t50;
    t94 = t9 * t23 * t40 * (1.0 / 2.0);
    t103 = t18 * t26 * t39 * (1.0 / 2.0);
    t95 = t94 - t103;
    t96 = t34 * t95 * (t28 - t35);
    t97 = X_dot_d * t34 * t71;
    t98 = t93 + t96 + t97 - t36 * t92 - X_dot_d * t29 * t48 * t50 * 2.0;
    t99 = t9 * t23;
    t100 = t18 * t26;
    t101 = t40 * t40;
    t102 = t39 * t39;
    t104 = t9 * t23 * t54 * (1.0 / 2.0);
    t144 = t18 * t26 * t53 * (1.0 / 2.0);
    t105 = t104 - t144;
    t106 = t21 * t31 * t40 * t61 * (1.0 / 4.0);
    t107 = t24 * t33 * t39 * t63 * (1.0 / 4.0);
    t171 = t18 * t24 * (1.0 / 4.0);
    t108 = t87 + t106 + t107 - t171;
    t109 = t18 * t39 * t63 * (1.0 / 2.0);
    t117 = t9 * t40 * t61 * (1.0 / 2.0);
    t110 = t43 + t45 + t109 - t117;
    t111 = Y_dot_d * t34 * t71;
    t112 = t111 - t36 * t108 - t34 * t50 * t68 - t29 * t34 * t110 - Y_dot_d * t29 * t48 * t50 * 2.0;
    t113 = t9 * t61;
    t114 = t18 * t63;
    t115 = t50 * t50;
    t134 = t31 * t101 * (1.0 / 4.0);
    t135 = t33 * t102 * (1.0 / 4.0);
    t116 = t9 + t18 - t134 - t135;
    t118 = t9 * t54 * (1.0 / 4.0);
    t119 = t9 * t54 * t61 * (1.0 / 2.0);
    t159 = t18 * t53 * t63 * (1.0 / 2.0);
    t120 = t119 - t159;
    t121 = t31 * t40 * t54 * (1.0 / 4.0);
    t122 = t33 * t39 * t53 * (1.0 / 4.0);
    t123 = t121 + t122;
    t124 = t21 * t31 * t40 * t79 * (1.0 / 4.0);
    t125 = t24 * t33 * t39 * t81 * (1.0 / 4.0);
    t126 = t124 + t125;
    t127 = t9 * t40 * t79 * (1.0 / 2.0);
    t136 = t18 * t39 * t81 * (1.0 / 2.0);
    t128 = t127 - t136;
    t129 = t34 * t128 * (t28 - t35);
    t130 = Z_dot_d * t34 * t71;
    t131 = t129 + t130 - t36 * t126 - t34 * t50 * t86 - Z_dot_d * t29 * t48 * t50 * 2.0;
    t132 = t9 * t79;
    t133 = t18 * t81;
    t138 = t18 * t53 * t81 * (1.0 / 2.0);
    t174 = t9 * t54 * t79 * (1.0 / 2.0);
    t139 = t43 + t45 + t138 - t174;
    t140 = t21 * t23 * t31 * t54 * (1.0 / 4.0);
    t141 = t24 * t26 * t33 * t53 * (1.0 / 4.0);
    t163 = t18 * t53 * (1.0 / 4.0);
    t142 = t118 + t140 + t141 - t163;
    t143 = t34 * t47 * t58;
    t145 = t34 * t105 * (t28 - t35);
    t146 = X_dot_d * t34 * t76;
    t147 = t143 + t145 + t146 - t36 * t142 - X_dot_d * t29 * t48 * t58 * 2.0;
    t148 = t23 * t31 * t40 * t54 * (1.0 / 4.0);
    t149 = t26 * t33 * t39 * t53 * (1.0 / 4.0);
    t150 = t148 + t149;
    t151 = X_dot_d * t34 * t123;
    t152 = X_dot_d * t48 * t50 * t58 * 2.0;
    t153 = t151 + t152 - t36 * t150 - t34 * t58 * t95 - t34 * t50 * t105;
    t154 = t54 * t54;
    t155 = t53 * t53;
    t156 = t21 * t31 * t54 * t61 * (1.0 / 4.0);
    t157 = t24 * t33 * t53 * t63 * (1.0 / 4.0);
    t158 = t156 + t157;
    t160 = t34 * t120 * (t28 - t35);
    t161 = Y_dot_d * t34 * t76;
    t162 = t160 + t161 - t36 * t158 - t34 * t58 * t68 - Y_dot_d * t29 * t48 * t58 * 2.0;
    t164 = t31 * t40 * t54 * t61 * (1.0 / 4.0);
    t165 = t33 * t39 * t53 * t63 * (1.0 / 4.0);
    t166 = t34 * t58 * t110;
    t167 = Y_dot_d * t34 * t123;
    t168 = Y_dot_d * t48 * t50 * t58 * 2.0;
    t169 = t58 * t58;
    t183 = t31 * t154 * (1.0 / 4.0);
    t184 = t33 * t155 * (1.0 / 4.0);
    t170 = t9 + t18 - t183 - t184;
    t172 = t21 * t31 * t54 * t79 * (1.0 / 4.0);
    t173 = t24 * t33 * t53 * t81 * (1.0 / 4.0);
    t175 = Z_dot_d * t34 * t76;
    t176 = t31 * t40 * t54 * t79 * (1.0 / 4.0);
    t177 = t33 * t39 * t53 * t81 * (1.0 / 4.0);
    t178 = t89 - t137 + t176 + t177;
    t179 = t34 * t50 * t139;
    t180 = Z_dot_d * t34 * t123;
    t181 = Z_dot_d * t48 * t50 * t58 * 2.0;
    t182 = t179 + t180 + t181 - t36 * t178 - t34 * t58 * t128;
    A0[0][0] = t36 * (t28 + t99 + t100 - t9 * (t19 - x[2 - 1] * 2.0) * (1.0 / 2.0) - t23 * t30 * t31 * (1.0 / 4.0) -
                      t26 * t32 * t33 * (1.0 / 4.0)) -
               X_dot_d * t34 * t65 - t29 * t34 * t47 * 2.0 + X_dot_d * (t29 * t29) * t48 * 2.0;
    A0[0][1] = t98;
    A0[0][2] = t147;
    A0[0][3] = t36 * (t113 + t114 - t30 * t31 * t61 * (1.0 / 4.0) - t32 * t33 * t63 * (1.0 / 4.0)) +
               Y_dot_d * t48 * (t64 * t64) * 2.0 - Y_dot_d * t34 * t65 + t34 * t68 * (t28 - t35) * 2.0;
    A0[0][4] = t112;
    A0[0][5] = t162;
    A0[0][6] = t36 * (t132 + t133 - t30 * t31 * t79 * (1.0 / 4.0) - t32 * t33 * t81 * (1.0 / 4.0)) +
               Z_dot_d * t48 * (t82 * t82) * 2.0 - Z_dot_d * t34 * t65 + t34 * t86 * (t28 - t35) * 2.0;
    A0[0][7] = t131;
    A0[0][8] = t175 - t36 * (t87 + t172 + t173 - t18 * t24 * (1.0 / 4.0)) - t34 * t58 * t86 - t29 * t34 * t139 -
               Z_dot_d * t29 * t48 * t58 * 2.0;
    A0[1][0] = t98;
    A0[1][1] = t36 * (t99 + t100 - t23 * t31 * t101 * (1.0 / 4.0) - t26 * t33 * t102 * (1.0 / 4.0)) -
               X_dot_d * t34 * t116 + X_dot_d * t48 * t115 * 2.0 - t34 * t50 * t95 * 2.0;
    A0[1][2] = t153;
    A0[1][3] = t112;
    A0[1][4] = -t36 * (t49 - t66 - t113 - t114 + t31 * t61 * t101 * (1.0 / 4.0) + t33 * t63 * t102 * (1.0 / 4.0)) -
               Y_dot_d * t34 * t116 + Y_dot_d * t48 * t115 * 2.0 + t34 * t50 * t110 * 2.0;
    A0[1][5] = t166 + t167 + t168 - t36 * (t118 + t164 + t165 - t18 * t53 * (1.0 / 4.0)) - t34 * t50 * t120;
    A0[1][6] = t131;
    A0[1][7] = t36 * (t132 + t133 - t31 * t79 * t101 * (1.0 / 4.0) - t33 * t81 * t102 * (1.0 / 4.0)) -
               Z_dot_d * t34 * t116 + Z_dot_d * t48 * t115 * 2.0 - t34 * t50 * t128 * 2.0;
    A0[1][8] = t182;
    A0[2][0] = t147;
    A0[2][1] = t153;
    A0[2][2] = t36 * (t99 + t100 - t23 * t31 * t154 * (1.0 / 4.0) - t26 * t33 * t155 * (1.0 / 4.0)) -
               X_dot_d * t34 * t170 + X_dot_d * t48 * t169 * 2.0 - t34 * t58 * t105 * 2.0;
    A0[2][3] = t162;
    A0[2][4] = t166 + t167 + t168 - t36 * (t118 - t163 + t164 + t165) - t34 * t50 * t120;
    A0[2][5] = t36 * (t113 + t114 - t31 * t61 * t154 * (1.0 / 4.0) - t33 * t63 * t155 * (1.0 / 4.0)) -
               Y_dot_d * t34 * t170 + Y_dot_d * t48 * t169 * 2.0 - t34 * t58 * t120 * 2.0;
    A0[2][6] =
        t175 - t36 * (t87 - t171 + t172 + t173) - t34 * t58 * t86 - t29 * t34 * t139 - Z_dot_d * t29 * t48 * t58 * 2.0;
    A0[2][7] = t182;
    A0[2][8] = -t36 * (t57 - t72 - t132 - t133 + t31 * t79 * t154 * (1.0 / 4.0) + t33 * t81 * t155 * (1.0 / 4.0)) -
               Z_dot_d * t34 * t170 + Z_dot_d * t48 * t169 * 2.0 + t34 * t58 * t139 * 2.0;
}

#pragma GCC diagnostic pop
